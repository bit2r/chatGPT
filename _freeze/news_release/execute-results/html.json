{
  "hash": "240e29006f6d1d6af68647b85f24f888",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"보도자료작성\"\ndescription: | \n  챗GPT 보도자료작성\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    code-tools: true\n    code-link: true\n    code-overflow: wrap\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\n\nlightbox: auto\nlink-citations: true\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\nnotebook-view:\n  - notebook: jupyterlab/misinformation.ipynb\n    title: \"오정보 쥬피터 노트북\"\n---\n\n\n![](images/langchain_summary.jpg)\n\n# 문서 요약\n\nGPT 모델은 텍스트에서 흔히 볼 수 있는 문자 시퀀스인 토큰을 사용하여 텍스트를 처리한다. GPT 모델은 이러한 토큰 간의 통계적 관계를 이해하고 토큰 시퀀스에서 다음 토큰을 생성하는 데 탁월하다.\n\n요약은 많은 LLM 작업의 기본 구성 요소로 많은 양의 텍스트를 간결한 요점으로 압축해야 하는 사용 사례가 많다.따라서, 요약하려는 텍스트의 길이에 따라 다양한 요약 방법을 선택해야한다.\n\n문서 길이에 따라 요약하는 방식도 달라진다. 짧은 텍스트의 경우 프롬프트 공학을 사용해서 요약을 짧은 코드로 수행할 수 있지만 텍스트의 길이가 길어지고 특히, 책과 같이 수백 페이지에 이르게 되는 경우 다른 전략이 필요하다.\n\n# 텍스트 길이\n\n서울 R 미트업 2023년 5월 \"챗GPT와 오정보(Misinformation)\" 행사에서 제빈 웨스트 교수가 발표한 [헛소문 바로잡기(Cutting Through Bullshit: Navigating Misinformation and Disinformation in the GenChatGPT Era)](https://r2bit.com/seoul-r/contents/meetup-2023.html) 텍스트를 추출하여 요약해보자. STT를 이용하여 음성에서 텍스트를 추출하는 방법에 대해서는 [음성인식(Whisper)](https://r2bit.com/chatGPT/whisper.html)을 참고한다.\n\n## `.srt` → `.txt`\n\n자막파일(`.srt`)에서 시간 정보를 제거하고 텍스트만 전환하는 작업을 다음 코드를 사용하여 진행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(srt)\nlibrary(tidyverse)\n\nmisinfo_raw <- read_srt(\"data/LibriSpeech/misinformation.srt\", collapse = \" \")\n\nmisinfo_str <- misinfo_raw %>% \n  filter(n >=20, n<=404) %>% \n  pull(subtitle)\n\nstr_c(misinfo_str, collapse = \" \") %>%\n  write_lines(\"data/LibriSpeech/misinfo_chatGPT.txt\")\n```\n:::\n\n\n## R 코드\n\n텍스트 길이와 별개로 단어갯수(word)를 파악하는 것이 전체적인 API 비용 및\n후속 텍스트 분석 방향을 잡을 때 중요하다. 이를 위해서 `stringr` 패키지\n`str_sub()` 함수와 정규표현식(`\\\\w+`)을 결합하여 사용하거나 \n텍스트 마이닝 특화된 `qdap` 패키지 `wc()` 함수를 사용해서 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmisinfo_txt <- read_lines(\"data/LibriSpeech/misinfo_chatGPT.txt\")\n\nmisinfo_wc <- str_count(misinfo_txt, '\\\\w+')\n\nglue::glue(\"텍스트 일부: {str_sub(misinfo_txt, 1, 100)} \n           단어갯수: {misinfo_wc}\n           단어갯수(qdap): {qdap::wc(misinfo_txt)}\")\n#> 텍스트 일부: Well, thank you very much, Dr. Ahn. This is a real pleasure to be able to speak across the ocean. I  \n#> 단어갯수: 6900\n#> 단어갯수(qdap): 6615\n```\n:::\n\n\n[OpenAI [Tokenizer](https://platform.openai.com/tokenizer)]{.aside}\n\n## `Tokenizer`\n\n챗GPT LLM은 토큰을 기본 단위로 사용하고 과금단위이기도 하기 때문에 OpenAI 에서 제공하는 \n[Tokenizer](https://platform.openai.com/tokenizer)에서 복사하여 붙여넣게 되면 발표음성을 텍스트 파일에 저장시킨 사항을 바로 확인할 수 있다. 다른 방식은 `langchain` `get_num_tokens()` 메쏘드를 사용해서 API를 통해 확인하는 방식이다.\n\n:::::{.columns}\n\n:::{.column width=30%}\n### 웹 UI {.unnumbered}\n\n![](images/misinfo_tokens.jpg){width=\"500\"}\n:::\n\n:::{.column  width=70%}\n### API 프로그래밍 {.unnumbered}\n\n<!-- 12A0366C:jupyterlab/misinformation.ipynb#langchain_token |  | echo:true,warning:false,asis:true,eval:false -->\n\n:::\n:::::\n\n\n# 요약\n\n[참조코드: [5 Levels Of Summarization: Novice to Expert](https://github.com/gkamradt/langchain-tutorials/blob/main/data_generation/5%20Levels%20Of%20Summarization%20-%20Novice%20To%20Expert.ipynb)]{.aside}\n\n[Greg Kamradt](https://github.com/gkamradt)은 LLM 문서요약관련하여 5가지 전략을 제시하고 있다.\n\n- 몇 문장 요약하기 - 기본 프롬프트\n- 몇 단락 요약 - 프롬프트 템플릿\n- 몇 페이지 요약 - 맵 리듀스(Map Reduce)\n- 책 전체 요약하기 - Best Representation Vectors\n- 알 수 없는 양의 텍스트 요약 - 에이전트(Agent)\n\n5가지 전략 중 강의내용을 요약할 수 있는 두가지 사례를 중심으로 살펴보자.\n\n## 몇 문장 요약\n\n요약형태도 지정하여 누구나 이해하기 쉬운 형태로 몇 문장 텍스트를 요약하도록 프롬프트를 작성하여 국문, 영문 작업을 수행한다.\n\n\n:::::::{.column-body-outset}\n\n:::::{.columns}\n:::{.column}\n### 국문요약 {.unnumbered}\n\n<!-- 12A0366C:jupyterlab/misinformation.ipynb#langchain_summary_sentences |  | echo:true,warning:false,asis:true,eval:false -->\n\n:::\n\n:::{.column}\n### 영문요약 {.unnumbered}\n\n<!-- 12A0366C:jupyterlab/misinformation.ipynb#langchain_summary_sentences_eng |  | echo:true,warning:false,asis:true,eval:false -->\n:::\n:::::\n\n:::::::\n\n## 전체 요약\n\n요약 대상이 되는 텍스트와 요약 프롬프트를 한번에 넣어 작업하는 대신\n텍스트 토큰 크기를 산정한 후에 적절한 크기로 나눈 다음\n각각 텍스트 조각에 대해 요약작업을 수행하고 나서 \n이를 다시 요약하는 맵리듀스(Map Reduce) 방식으로 요약 작업을 마무리한다.\n\n### 토큰 크기\n\n발표 텍스트 토큰 크기를 계산하여 적절한 토큰 분리 크기를 산정한다.\n\n<!-- 12A0366C:jupyterlab/misinformation.ipynb#openai-setup-split |  | echo:true,warning:false,asis:true,eval:false -->\n\n### 요약결과\n\n`load_summarize_chain()` 으로 전체 발표 텍스트를 요약한다.\n\n<!-- 12A0366C:jupyterlab/misinformation.ipynb#openai-split-size |  | echo:true,warning:false,asis:true,eval:false -->\n\n:::{.callout-warning collapse=\"false\"}\n### 디플 번역 {.unnumbered}\n\n이 글에서는 잘못된 정보, 일자리 퇴출, 사이비 과학 확산, 신뢰성 검증의 필요성 등 생성형 AI와 챗봇의 잠재적 영향에 대해 논의합니다. 또한 이러한 기술이 악의적인 행위자에 의해 악용될 수 있는 방법과 이 문제를 해결하기 위한 연구, 정책, 교육, 커뮤니티 참여의 필요성에 대해서도 살펴봅니다. 민주적 담론, 건강 및 기타 영역에 미칠 수 있는 잠재적 영향과 잘못된 정보의 영향을 감지하고 되돌리기 어려운 점을 살펴봅니다. 마지막으로 인공지능으로 인한 일자리 손실 가능성, 사이비 과학의 확산, 챗봇이 허위 인용을 일으킬 가능성에 대해 논의합니다.\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}