{
  "hash": "b2760206544b9c618bb46d2f2130f161",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"삼성전자 주가예측\"\ndescription: |\n  `chatGPT` 코딩 기능을 활용하여 주가를 예측해보자.\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\n   - line-highlight   \nlightbox: auto\nlink-citations: yes\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n![](images/samsung_codex.jpg)\n\n삼성전자 주가를 예측하는 프로그램을 OpenAI chatGPT를 활용하여 작성해보자.\n\n# 데이터 크롤링\n\n삼성전자 주가를 예측하기 위해서는 데이터가 필요하다. \n이를 위해서 다음과 같이 지시명령어(prompt)를 작성하여 `chatGPT`에 요청한다.\n\n:::{.callout-warning collapse=\"false\"}\n### 지시명령어\n\n> 파이썬으로 최근 3년간 삼성전자 주가 데이터를 크롤링하여 samsung.csv 파일로 저장하는 코드를 작성해 주세요.\n:::\n\n\n[**대한민국 영업일수** ![](images/samsung_working_day.jpg)]{.aside}\n\n:::{.panel-tabset}\n\n## chatGPT 코드 {.unnumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nimport pandas as pd\n\n# URL of Samsung Electronics stock historical data\nurl = \"https://finance.naver.com/item/sise_day.naver?code=005930&page=\"\n\n# Empty list to store stock price data\ndata = []\n\n# Loop through the last 3 years of pages (60 pages in total)\nfor page in range(1, 61):\n    # Send a GET request to the URL with the current page number\n    response = requests.get(url + str(page))\n\n    # Read the HTML table into a pandas dataframe\n    df = pd.read_html(response.content)[0]\n\n    # Drop the last row which is just a duplicate of the column headers\n    df = df.drop(len(df) - 1)\n\n    # Append the dataframe to the list\n    data.append(df)\n\n# Concatenate all dataframes into a single dataframe\ndf = pd.concat(data)\n\n# Reverse the order of rows to start from the earliest date\ndf = df.iloc[::-1]\n\n# Set the date column as the index and remove unnecessary columns\ndf = df.set_index('날짜')[['종가', '거래량']]\n\n# Convert the data types of columns to float and int\ndf['종가'] = df['종가'].astype(float)\ndf['거래량'] = df['거래량'].str.replace(',', '').astype(int)\n\n# Print the resulting dataframe\nprint(df)\n```\n:::\n\n\n통상 영업일기준으로 1년을 보통 247일가 된다. 해당 웹사이트 [삼성전자 주식 첫페이지](https://finance.naver.com/item/sise_day.naver?code=005930&page=1)를 일별하면\n한 페이지에 10 영업일 주식거래 데이터가 담겨있어 총 약 반년치 데이터가 누락되어 2.5년 정도 된다고 보면 된다.\n\n## 오류 수정코드 {.unnumbered}\n\n\n::: {.cell source-line-numbers='14,46,39,49'}\n\n```{.python .cell-code  code-line-numbers=\"true\"}\n\nimport requests\nimport pandas as pd\n\n# URL of Samsung Electronics stock historical data\nurl = \"https://finance.naver.com/item/sise_day.naver?code=005930&page=\"\n\n# Empty list to store stock price data\ndata = []\n\n# Loop through the last 3 years of pages (60 pages in total)\nfor page in range(1, 61):\n    # Send a GET request to the URL with the current page number\n    response = requests.get(url + str(page), headers={'User-agent': 'Mozilla/5.0'})\n    \n\n    # Check if the response is successful\n    if response.status_code == 200:\n        # Read the HTML table into a pandas dataframe\n        df_list = pd.read_html(response.text, flavor='html5lib')\n\n        # Check if the list of dataframes is not empty\n        if df_list:\n            # Get the first dataframe\n            df = df_list[0]\n\n            # Drop the last row which is just a duplicate of the column headers\n            df = df.drop(len(df) - 1)\n\n            # Append the dataframe to the list\n            data.append(df)\n\n# Concatenate all dataframes into a single dataframe\ndf = pd.concat(data)\n\n# Reverse the order of rows to start from the earliest date\ndf = df.iloc[::-1]\n\ndf = df.dropna()\n\n# Set the date column as the index and remove unnecessary columns\ndf = df.set_index('날짜')[['종가', '거래량']]\n\n# Convert the data types of columns to float and int\ndf['종가'] = df['종가'].astype(float)\ndf['거래량'] = df['거래량'].astype(int)\n\n# Save the dataframe as a CSV file\ndf.to_csv('data/samsung.csv')\n\n# Print a confirmation message\nprint('samsung.csv saved successfully.')\n```\n:::\n\n\n네이버 주식 일별시세를 읽어오는 경우 `ValueError: No tables found`가 발생되어 \n[네이버 주식 일별 시세 pandas read_html() ValueError: No tables found 오류](https://dasom.net/147) 참조하여 \n오류수정, 크롤링 데이터에 결측값이 포함되어 이를 수정작업 후에ㅏ 마지막으로 자료형 오류수정 후 데이터를 `data/samsung.csv` 파일로 다운로드하여 작업마무리한다.\n\n:::\n\n## 오류 수정\n\n`lxml` 패키지가 설치되지 않는 오류가 발생되었다.\n\n```\nImportError: lxml not found, please install it\nValueError: No objects to concatenate\n```\n\n:::{.callout-warning collapse=\"false\"}\n### 지시명령어\n\n> fix the bug <br>\n> ImportError: lxml not found, please install it <br>\n> ValueError: No objects to concatenate <br>\n> Answer in Korean.\n\n`pip install lxml`\n\n:::\n\n# 시각화\n\n앞서 크롤링하여 `.csv` 파일로 저장한 데이터를 `pandas` 데이터프레임 자료구조와\n시각화를 위해서 `matplotlib`으로 시각화하는 코드를 작성하게 지시한다.\n\n:::{.callout-warning collapse=\"false\"}\n## 지시명령어\n\n> 삼성전자 주가데이터가 'data/samsung.csv' 파일에 저장되어 있습니다. pandas 데이터프레임으로 불러읽어와서 x 축에는 '날짜' y축에는 '종가'로 하여 시계열 그래프를 matplotlib으로 작성해주세요\n:::\n\n:::{.panel-tabset}\n\n## chatGPT 파이썬 코드 {.unumbered}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the Samsung Electronics stock price data from the 'data/samsung.csv' file into a pandas dataframe\ndf = pd.read_csv('data/samsung.csv', index_col='날짜', parse_dates=True)\n\n# Create a time series graph with matplotlib\nplt.plot(df.index, df['종가'])\n\n# Set the x-axis label to 'Date'\nplt.xlabel('Date')\n\n# Set the y-axis label to 'Closing Price'\nplt.ylabel('Closing Price')\n\n# Set the title of the graph to 'Samsung Electronics Stock Price'\nplt.title('Samsung Electronics Stock Price')\n\n# Show the graph\nplt.show()\n\n# PNG 저장\nplt.savefig('images/samsung_matplotlib.png')\n```\n:::\n\n\n![](images/samsung_matplotlib.png)\n\n## 사람작성 R 코드 {.unumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nextrafont::loadfonts()\n\nsamsung_tbl <- read_csv(\"data/samsung.csv\")\n\nsamsung_tbl %>% \n  ## 자료형 변환 -----------\n  mutate(날짜 = lubridate::ymd(날짜)) %>% \n  ggplot(aes(x = 날짜, y = 종가)) +\n    geom_line() +\n    scale_x_date(date_labels = \"%y년 %m월\") +\n    scale_y_continuous(labels = scales::comma) +\n    theme_bw(base_family = \"MaruBuri Bold\") +\n    labs(x = \"\",\n         title = \"삼성전자주가 최근 3년 주가 추세\",\n         subtitle = \"주가 데이터 크롤링을 chatGPT가 파이썬으로 작성\",\n         caption = \"출처: https://r2bit.com/chatGPT/samsung.html\")\n```\n\n::: {.cell-output-display}\n![](samsung_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n# 예측\n\n데이터에 대한 전반적인 사항은 파악을 했으니 다음 단계로 삼성전자 주가 예측을 통해서 투자수익을 거둘 수 있는 방안을 찾아보자. chatGPT에 과거 3년치 삼성전자 주가 데이터를 바탕으로 1달 예측하는 코드를 작성하게 지시한다.\n\n:::{.callout-warning collapse=\"false\"}\n## 지시명령어\n\n> 삼성전자 주가 종가기준 1달 예측하는 모형을 제작하고 예측값을 pandas 데이터프레임에 붙여줘 <br>\n> 선형 회귀모형 대신 ARIMA 모형으로 예측모형을 바꿔서 다시 작성해줘 <br>\n> 삼성전자 주가를 예측하는데  pmdarima 패키지를 사용해서 1달 예측하는 코드를 작성해주세요. \n:::\n\n:::{.panel-tabset}\n\n## chatGPT 파이썬 코드 {.unumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport pmdarima as pm\n\n# Load the Samsung Electronics stock price data from the 'data/samsung.csv' file into a pandas dataframe\ndf = pd.read_csv('data/samsung.csv', index_col='날짜', parse_dates=True)\n\n# Extract the '종가' column as a pandas series\nclosing_prices = df['종가']\n\n# Create an ARIMA model using pmdarima\nmodel = pm.auto_arima(closing_prices, seasonal=False, \n                      error_action='ignore', suppress_warnings=True)\n\n# Make a prediction for the next 30 days\nforecast = model.predict(n_periods=30)\n\n# Create a new column in the dataframe to store the predicted prices\ndf['Predicted Price'] = None\n\n# Calculate the predicted prices for the next 30 days\nlast_price = closing_prices[-1]\nfor i in range(30):\n    predicted_price = last_price * (1 + forecast[i])\n    date = closing_prices.index[-1] + pd.DateOffset(days=i+1)\n    df.at[date, 'Predicted Price'] = predicted_price\n\n# Print the dataframe with the predicted prices\nprint(df)\n```\n:::\n\n\n시계열 ARIMA 예측 기반 코드를 제공하지만 실제로 돌려보면 오류가 있어 사람이 손을 봐야 함.\n\n## 사람 작성 코드 {.unnumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport pmdarima as pm\n\n# Load the Samsung Electronics stock price data from the 'data/samsung.csv' file into a pandas dataframe\ndata = pd.read_csv('data/samsung.csv', index_col='날짜', parse_dates=True)\n\n# Extract the '종가' column and leave it as dataframe\nclosing_prices = data[['종가']]\n\n# Create an ARIMA model using pmdarima\nstepwise_model = pm.auto_arima(closing_prices, start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=12,\n                           start_P=0, seasonal=True,\n                           d=1, D=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\n\nprint(stepwise_model.aic())\n\n# data.index.min(), # data.index.max()\n\n# Make a prediction for the next 30 days\nfuture_dates = pd.date_range(start='2023-03-15', end='2023-04-14')\nfuture_forecast = stepwise_model.predict(n_periods = len(future_dates))\n\n# Create a DataFrame of forecasted values with future dates as the index\nforecast_df = pd.DataFrame({'종가': future_forecast,\n                            '날짜': future_dates})\n                            \nforecast_df.set_index('날짜', inplace=True)\n\n# Print the forecasted values\nfull_df = pd.concat([closing_prices, forecast_df], axis = 0)\n\nprint(full_df)\n\nfull_df.to_csv(\"data/samsung_forecast.csv\")\n```\n:::\n\n\n`chatGPT`가 제시한 코드를 기반으로 자료형을 맞춰 예측값과 결합시켜 예측값의 정확도를 평가할 수 있도록 로컬파일로 떨어뜨림.\n\n:::\n\n## 예측결과 시각화\n\n삼성전자 주식 예측 결과를 시각화하여 투자 예측 결과를 살펴보자.\n\n:::{.panel-tabset}\n\n### 시각화 {.unnumbered}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nfull_tbl <- read_csv(\"data/samsung_forecast.csv\") %>% \n  ## 자료형 변환 -----------\n  mutate(날짜 = lubridate::ymd(날짜))\n\nfuture_data <- full_tbl %>% \n  filter(날짜 >= as.Date(\"2023-03-15\"))\n\nfull_tbl %>% \n  ## 자료형 변환 -----------\n  mutate(날짜 = lubridate::ymd(날짜)) %>% \n  ggplot(aes(x = 날짜, y = 종가)) +\n    geom_line(color=\"black\") +\n    scale_x_date(date_labels = \"%y년 %m월\") +\n    scale_y_continuous(labels = scales::comma) +\n    theme_bw(base_family = \"MaruBuri Bold\") +\n    labs(x = \"\",\n         title = \"삼성전자주가 최근 3년 주가 추세\",\n         subtitle = \"주가 데이터 크롤링을 chatGPT가 파이썬으로 작성\",\n         caption = \"출처: https://r2bit.com/chatGPT/samsung.html\") +\n    geom_vline(xintercept = as.Date(\"2023-03-14\")) +\n    geom_line(data = future_data, aes(x=날짜, y=종가), color = \"red\", size = 1.5)\n```\n\n::: {.cell-output-display}\n![](samsung_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### 주가예측 표 {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reactable)\n\nfull_tbl %>% \n  arrange(desc(날짜)) %>% \n  reactable::reactable(\n    columns = list(\n    종가 = colDef(format = colFormat(prefix = \"₩ \", separators = TRUE, digits = 0),\n                                     align = \"center\")\n  )) \n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"reactable html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-5a5163d5058d39f85428\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5a5163d5058d39f85428\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"날짜\":[\"2023-04-14\",\"2023-04-13\",\"2023-04-12\",\"2023-04-11\",\"2023-04-10\",\"2023-04-09\",\"2023-04-08\",\"2023-04-07\",\"2023-04-06\",\"2023-04-05\",\"2023-04-04\",\"2023-04-03\",\"2023-04-02\",\"2023-04-01\",\"2023-03-31\",\"2023-03-30\",\"2023-03-29\",\"2023-03-28\",\"2023-03-27\",\"2023-03-26\",\"2023-03-25\",\"2023-03-24\",\"2023-03-23\",\"2023-03-22\",\"2023-03-21\",\"2023-03-20\",\"2023-03-19\",\"2023-03-18\",\"2023-03-17\",\"2023-03-16\",\"2023-03-15\",\"2023-03-14\",\"2023-03-13\",\"2023-03-10\",\"2023-03-09\",\"2023-03-08\",\"2023-03-07\",\"2023-03-06\",\"2023-03-03\",\"2023-03-02\",\"2023-02-28\",\"2023-02-27\",\"2023-02-24\",\"2023-02-23\",\"2023-02-22\",\"2023-02-21\",\"2023-02-20\",\"2023-02-17\",\"2023-02-16\",\"2023-02-15\",\"2023-02-14\",\"2023-02-13\",\"2023-02-10\",\"2023-02-09\",\"2023-02-08\",\"2023-02-07\",\"2023-02-06\",\"2023-02-03\",\"2023-02-02\",\"2023-02-01\",\"2023-01-31\",\"2023-01-30\",\"2023-01-27\",\"2023-01-26\",\"2023-01-25\",\"2023-01-20\",\"2023-01-19\",\"2023-01-18\",\"2023-01-17\",\"2023-01-16\",\"2023-01-13\",\"2023-01-12\",\"2023-01-11\",\"2023-01-10\",\"2023-01-09\",\"2023-01-06\",\"2023-01-05\",\"2023-01-04\",\"2023-01-03\",\"2023-01-02\",\"2022-12-29\",\"2022-12-28\",\"2022-12-27\",\"2022-12-26\",\"2022-12-23\",\"2022-12-22\",\"2022-12-21\",\"2022-12-20\",\"2022-12-19\",\"2022-12-16\",\"2022-12-15\",\"2022-12-14\",\"2022-12-13\",\"2022-12-12\",\"2022-12-09\",\"2022-12-08\",\"2022-12-07\",\"2022-12-06\",\"2022-12-05\",\"2022-12-02\",\"2022-12-01\",\"2022-11-30\",\"2022-11-29\",\"2022-11-28\",\"2022-11-25\",\"2022-11-24\",\"2022-11-23\",\"2022-11-22\",\"2022-11-21\",\"2022-11-18\",\"2022-11-17\",\"2022-11-16\",\"2022-11-15\",\"2022-11-14\",\"2022-11-11\",\"2022-11-10\",\"2022-11-09\",\"2022-11-08\",\"2022-11-07\",\"2022-11-04\",\"2022-11-03\",\"2022-11-02\",\"2022-11-01\",\"2022-10-31\",\"2022-10-28\",\"2022-10-27\",\"2022-10-26\",\"2022-10-25\",\"2022-10-24\",\"2022-10-21\",\"2022-10-20\",\"2022-10-19\",\"2022-10-18\",\"2022-10-17\",\"2022-10-14\",\"2022-10-13\",\"2022-10-12\",\"2022-10-11\",\"2022-10-07\",\"2022-10-06\",\"2022-10-05\",\"2022-10-04\",\"2022-09-30\",\"2022-09-29\",\"2022-09-28\",\"2022-09-27\",\"2022-09-26\",\"2022-09-23\",\"2022-09-22\",\"2022-09-21\",\"2022-09-20\",\"2022-09-19\",\"2022-09-16\",\"2022-09-15\",\"2022-09-14\",\"2022-09-13\",\"2022-09-08\",\"2022-09-07\",\"2022-09-06\",\"2022-09-05\",\"2022-09-02\",\"2022-09-01\",\"2022-08-31\",\"2022-08-30\",\"2022-08-29\",\"2022-08-26\",\"2022-08-25\",\"2022-08-24\",\"2022-08-23\",\"2022-08-22\",\"2022-08-19\",\"2022-08-18\",\"2022-08-17\",\"2022-08-16\",\"2022-08-12\",\"2022-08-11\",\"2022-08-10\",\"2022-08-09\",\"2022-08-08\",\"2022-08-05\",\"2022-08-04\",\"2022-08-03\",\"2022-08-02\",\"2022-08-01\",\"2022-07-29\",\"2022-07-28\",\"2022-07-27\",\"2022-07-26\",\"2022-07-25\",\"2022-07-22\",\"2022-07-21\",\"2022-07-20\",\"2022-07-19\",\"2022-07-18\",\"2022-07-15\",\"2022-07-14\",\"2022-07-13\",\"2022-07-12\",\"2022-07-11\",\"2022-07-08\",\"2022-07-07\",\"2022-07-06\",\"2022-07-05\",\"2022-07-04\",\"2022-07-01\",\"2022-06-30\",\"2022-06-29\",\"2022-06-28\",\"2022-06-27\",\"2022-06-24\",\"2022-06-23\",\"2022-06-22\",\"2022-06-21\",\"2022-06-20\",\"2022-06-17\",\"2022-06-16\",\"2022-06-15\",\"2022-06-14\",\"2022-06-13\",\"2022-06-10\",\"2022-06-09\",\"2022-06-08\",\"2022-06-07\",\"2022-06-03\",\"2022-06-02\",\"2022-05-31\",\"2022-05-30\",\"2022-05-27\",\"2022-05-26\",\"2022-05-25\",\"2022-05-24\",\"2022-05-23\",\"2022-05-20\",\"2022-05-19\",\"2022-05-18\",\"2022-05-17\",\"2022-05-16\",\"2022-05-13\",\"2022-05-12\",\"2022-05-11\",\"2022-05-10\",\"2022-05-09\",\"2022-05-06\",\"2022-05-04\",\"2022-05-03\",\"2022-05-02\",\"2022-04-29\",\"2022-04-28\",\"2022-04-27\",\"2022-04-26\",\"2022-04-25\",\"2022-04-22\",\"2022-04-21\",\"2022-04-20\",\"2022-04-19\",\"2022-04-18\",\"2022-04-15\",\"2022-04-14\",\"2022-04-13\",\"2022-04-12\",\"2022-04-11\",\"2022-04-08\",\"2022-04-07\",\"2022-04-06\",\"2022-04-05\",\"2022-04-04\",\"2022-04-01\",\"2022-03-31\",\"2022-03-30\",\"2022-03-29\",\"2022-03-28\",\"2022-03-25\",\"2022-03-24\",\"2022-03-23\",\"2022-03-22\",\"2022-03-21\",\"2022-03-18\",\"2022-03-17\",\"2022-03-16\",\"2022-03-15\",\"2022-03-14\",\"2022-03-11\",\"2022-03-10\",\"2022-03-08\",\"2022-03-07\",\"2022-03-04\",\"2022-03-03\",\"2022-03-02\",\"2022-02-28\",\"2022-02-25\",\"2022-02-24\",\"2022-02-23\",\"2022-02-22\",\"2022-02-21\",\"2022-02-18\",\"2022-02-17\",\"2022-02-16\",\"2022-02-15\",\"2022-02-14\",\"2022-02-11\",\"2022-02-10\",\"2022-02-09\",\"2022-02-08\",\"2022-02-07\",\"2022-02-04\",\"2022-02-03\",\"2022-01-28\",\"2022-01-27\",\"2022-01-26\",\"2022-01-25\",\"2022-01-24\",\"2022-01-21\",\"2022-01-20\",\"2022-01-19\",\"2022-01-18\",\"2022-01-17\",\"2022-01-14\",\"2022-01-13\",\"2022-01-12\",\"2022-01-11\",\"2022-01-10\",\"2022-01-07\",\"2022-01-06\",\"2022-01-05\",\"2022-01-04\",\"2022-01-03\",\"2021-12-30\",\"2021-12-29\",\"2021-12-28\",\"2021-12-27\",\"2021-12-24\",\"2021-12-23\",\"2021-12-22\",\"2021-12-21\",\"2021-12-20\",\"2021-12-17\",\"2021-12-16\",\"2021-12-15\",\"2021-12-14\",\"2021-12-13\",\"2021-12-10\",\"2021-12-09\",\"2021-12-08\",\"2021-12-07\",\"2021-12-06\",\"2021-12-03\",\"2021-12-02\",\"2021-12-01\",\"2021-11-30\",\"2021-11-29\",\"2021-11-26\",\"2021-11-25\",\"2021-11-24\",\"2021-11-23\",\"2021-11-22\",\"2021-11-19\",\"2021-11-18\",\"2021-11-17\",\"2021-11-16\",\"2021-11-15\",\"2021-11-12\",\"2021-11-11\",\"2021-11-10\",\"2021-11-09\",\"2021-11-08\",\"2021-11-05\",\"2021-11-04\",\"2021-11-03\",\"2021-11-02\",\"2021-11-01\",\"2021-10-29\",\"2021-10-28\",\"2021-10-27\",\"2021-10-26\",\"2021-10-25\",\"2021-10-22\",\"2021-10-21\",\"2021-10-20\",\"2021-10-19\",\"2021-10-18\",\"2021-10-15\",\"2021-10-14\",\"2021-10-13\",\"2021-10-12\",\"2021-10-08\",\"2021-10-07\",\"2021-10-06\",\"2021-10-05\",\"2021-10-01\",\"2021-09-30\",\"2021-09-29\",\"2021-09-28\",\"2021-09-27\",\"2021-09-24\",\"2021-09-23\",\"2021-09-17\",\"2021-09-16\",\"2021-09-15\",\"2021-09-14\",\"2021-09-13\",\"2021-09-10\",\"2021-09-09\",\"2021-09-08\",\"2021-09-07\",\"2021-09-06\",\"2021-09-03\",\"2021-09-02\",\"2021-09-01\",\"2021-08-31\",\"2021-08-30\",\"2021-08-27\",\"2021-08-26\",\"2021-08-25\",\"2021-08-24\",\"2021-08-23\",\"2021-08-20\",\"2021-08-19\",\"2021-08-18\",\"2021-08-17\",\"2021-08-13\",\"2021-08-12\",\"2021-08-11\",\"2021-08-10\",\"2021-08-09\",\"2021-08-06\",\"2021-08-05\",\"2021-08-04\",\"2021-08-03\",\"2021-08-02\",\"2021-07-30\",\"2021-07-29\",\"2021-07-28\",\"2021-07-27\",\"2021-07-26\",\"2021-07-23\",\"2021-07-22\",\"2021-07-21\",\"2021-07-20\",\"2021-07-19\",\"2021-07-16\",\"2021-07-15\",\"2021-07-14\",\"2021-07-13\",\"2021-07-12\",\"2021-07-09\",\"2021-07-08\",\"2021-07-07\",\"2021-07-06\",\"2021-07-05\",\"2021-07-02\",\"2021-07-01\",\"2021-06-30\",\"2021-06-29\",\"2021-06-28\",\"2021-06-25\",\"2021-06-24\",\"2021-06-23\",\"2021-06-22\",\"2021-06-21\",\"2021-06-18\",\"2021-06-17\",\"2021-06-16\",\"2021-06-15\",\"2021-06-14\",\"2021-06-11\",\"2021-06-10\",\"2021-06-09\",\"2021-06-08\",\"2021-06-07\",\"2021-06-04\",\"2021-06-03\",\"2021-06-02\",\"2021-06-01\",\"2021-05-31\",\"2021-05-28\",\"2021-05-27\",\"2021-05-26\",\"2021-05-25\",\"2021-05-24\",\"2021-05-21\",\"2021-05-20\",\"2021-05-18\",\"2021-05-17\",\"2021-05-14\",\"2021-05-13\",\"2021-05-12\",\"2021-05-11\",\"2021-05-10\",\"2021-05-07\",\"2021-05-06\",\"2021-05-04\",\"2021-05-03\",\"2021-04-30\",\"2021-04-29\",\"2021-04-28\",\"2021-04-27\",\"2021-04-26\",\"2021-04-23\",\"2021-04-22\",\"2021-04-21\",\"2021-04-20\",\"2021-04-19\",\"2021-04-16\",\"2021-04-15\",\"2021-04-14\",\"2021-04-13\",\"2021-04-12\",\"2021-04-09\",\"2021-04-08\",\"2021-04-07\",\"2021-04-06\",\"2021-04-05\",\"2021-04-02\",\"2021-04-01\",\"2021-03-31\",\"2021-03-30\",\"2021-03-29\",\"2021-03-26\",\"2021-03-25\",\"2021-03-24\",\"2021-03-23\",\"2021-03-22\",\"2021-03-19\",\"2021-03-18\",\"2021-03-17\",\"2021-03-16\",\"2021-03-15\",\"2021-03-12\",\"2021-03-11\",\"2021-03-10\",\"2021-03-09\",\"2021-03-08\",\"2021-03-05\",\"2021-03-04\",\"2021-03-03\",\"2021-03-02\",\"2021-02-26\",\"2021-02-25\",\"2021-02-24\",\"2021-02-23\",\"2021-02-22\",\"2021-02-19\",\"2021-02-18\",\"2021-02-17\",\"2021-02-16\",\"2021-02-15\",\"2021-02-10\",\"2021-02-09\",\"2021-02-08\",\"2021-02-05\",\"2021-02-04\",\"2021-02-03\",\"2021-02-02\",\"2021-02-01\",\"2021-01-29\",\"2021-01-28\",\"2021-01-27\",\"2021-01-26\",\"2021-01-25\",\"2021-01-22\",\"2021-01-21\",\"2021-01-20\",\"2021-01-19\",\"2021-01-18\",\"2021-01-15\",\"2021-01-14\",\"2021-01-13\",\"2021-01-12\",\"2021-01-11\",\"2021-01-08\",\"2021-01-07\",\"2021-01-06\",\"2021-01-05\",\"2021-01-04\",\"2020-12-30\",\"2020-12-29\",\"2020-12-28\",\"2020-12-24\",\"2020-12-23\",\"2020-12-22\",\"2020-12-21\",\"2020-12-18\",\"2020-12-17\",\"2020-12-16\",\"2020-12-15\",\"2020-12-14\",\"2020-12-11\",\"2020-12-10\",\"2020-12-09\",\"2020-12-08\",\"2020-12-07\",\"2020-12-04\",\"2020-12-03\",\"2020-12-02\",\"2020-12-01\",\"2020-11-30\",\"2020-11-27\",\"2020-11-26\",\"2020-11-25\",\"2020-11-24\",\"2020-11-23\",\"2020-11-20\",\"2020-11-19\",\"2020-11-18\",\"2020-11-17\",\"2020-11-16\",\"2020-11-13\",\"2020-11-12\",\"2020-11-11\",\"2020-11-10\",\"2020-11-09\",\"2020-11-06\",\"2020-11-05\",\"2020-11-04\",\"2020-11-03\",\"2020-11-02\",\"2020-10-30\",\"2020-10-29\",\"2020-10-28\",\"2020-10-27\",\"2020-10-26\",\"2020-10-23\",\"2020-10-22\",\"2020-10-21\",\"2020-10-20\",\"2020-10-19\",\"2020-10-16\",\"2020-10-15\",\"2020-10-14\",\"2020-10-13\",\"2020-10-12\"],\"종가\":[57684.9238773306,58162.0628031888,58194.9467622186,58108.3989896601,58048.9549061845,57946.8068128993,57927.2055389364,57665.5450491901,57790.4017482151,58033.7813878726,58275.5867222776,58017.0813789218,58191.1021623287,58687.2243108147,58659.3779195072,58595.5579485032,58527.8496161951,58425.8278240849,58454.4165448156,58249.2986878958,58501.0601892977,58580.4138442974,58901.2544785534,58743.9178872089,58967.8007619841,59530.9732588402,59288.6221321354,59305.0786790753,59208.1803207057,59106.6046350316,59305.4044940665,59300,60000,59500,60100,60300,60700,61500,60500,60800,60600,60500,61300,62000,61100,62100,62700,62600,63700,62200,63200,62900,62800,63000,63100,61900,61600,63800,63500,61800,61000,63300,64600,63900,63400,61800,61500,60400,61000,61100,60800,60500,60500,60400,60700,59000,58200,57800,55400,55500,55300,56600,58100,57900,58100,59100,58000,58600,59500,59500,59300,60500,59700,59500,60400,59200,58900,59200,60300,60400,62600,62200,60600,60100,61000,61400,61000,60600,61400,61800,61400,62700,62400,61900,62900,60400,62000,61800,60200,59400,59200,59600,60000,59400,57300,59500,59400,57700,57500,55900,55500,55800,56500,56600,56300,55200,55800,55400,56200,56300,56000,55200,53100,52600,52900,54200,53900,54500,54400,55300,55800,56400,56200,56000,56800,58100,55600,56000,57100,57100,57500,58400,59700,58800,58600,60000,59700,59000,59100,60000,60900,61500,60400,61000,60200,59900,59100,60000,60800,61500,61500,61300,61700,61300,61400,61900,61800,61700,61100,61300,61800,60500,60900,61900,60000,57500,58000,58100,58800,58700,58200,56400,57200,57100,56200,57000,58000,59400,58800,58400,57400,57600,58500,58700,59800,60900,60700,61900,62100,63800,65200,65300,65500,66800,66700,67400,67700,66500,65900,66400,66500,67900,68000,67500,68100,67600,66300,66500,64900,65700,65700,66100,66500,67900,67500,67300,67400,64800,65000,66100,66300,67000,67700,67400,67300,66700,66600,67500,68700,67000,67900,67800,68000,68500,69200,69300,69100,69600,69900,70200,69700,69800,69800,70500,70300,69900,70700,71200,70400,69500,70200,70000,71200,69500,70100,71500,72900,71700,72100,71900,71500,73000,73400,74200,74300,75000,74800,73700,73700,74900,75400,74700,73500,73000,74000,73300,73300,71300,73300,74000,75100,75600,76500,76300,77000,77500,77300,77900,78900,78900,78000,78300,76900,77400,78700,78600,78300,78800,80300,80200,80500,79900,79400,78100,77100,78000,77800,77600,77000,76800,76900,78200,77400,77400,76300,75600,75800,74400,71300,72300,72300,73700,74800,75300,74900,71200,70200,70700,71300,71400,70600,69900,70200,70500,70600,70200,70600,70400,71500,69900,69800,70700,70100,71100,70200,70400,70200,70300,70600,70200,70100,69400,68800,69000,71500,71600,71300,72200,73200,74100,74100,76300,77700,77300,77400,77200,76100,77000,76600,76300,75300,75300,76300,76100,77300,76600,76000,76800,76700,74600,74300,74600,75700,75600,73300,72700,73100,73900,74200,74400,77000,78500,80200,81500,81500,82100,82900,81400,79300,78500,79000,79200,78500,78800,79300,79700,78500,79000,79000,79800,80600,79500,79800,79700,79400,79900,80800,81200,80400,80000,80100,80700,81000,81900,81600,81200,80100,80000,79900,80500,80900,81800,80900,80500,81000,81000,81100,81900,81900,82200,82800,80800,80600,80500,80100,79600,79800,79900,79700,80100,79500,79600,79600,80100,78500,80000,81200,83200,81900,82300,82600,81700,81500,81700,82100,82900,83500,82800,82400,82600,83900,83300,83900,84100,84000,84000,83200,83600,84700,85600,86000,85400,84800,82900,81400,82200,81600,81500,81200,81000,81800,82000,81900,82900,82300,82800,81800,82800,82000,80900,81400,82000,82100,82400,84000,83600,82500,85300,82000,82000,82200,82600,82100,83200,84900,84200,81600,82700,83000,83500,82500,84600,84400,83000,82000,83700,85600,86700,89400,86800,88100,87200,87000,85000,88000,89700,89700,90600,91000,88800,82900,82200,83900,83000,81000,78300,78700,77800,73900,72300,73000,73000,73300,73800,73800,73800,73400,72900,73900,71700,72900,71500,69700,69500,67800,66700,68200,68000,66600,67700,67500,64700,64600,64800,65700,66300,63200,61000,61300,60200,60200,60100,60300,58500,58800,57400,56600,58100,59000,59800,60400,60200,60100,60900,60900,60000,59500,60000,60900,60900,60400]},\"columns\":[{\"id\":\"날짜\",\"name\":\"날짜\",\"type\":\"Date\"},{\"id\":\"종가\",\"name\":\"종가\",\"type\":\"numeric\",\"format\":{\"cell\":{\"prefix\":\"₩ \",\"digits\":0,\"separators\":true},\"aggregated\":{\"prefix\":\"₩ \",\"digits\":0,\"separators\":true}},\"align\":\"center\"}],\"dataKey\":\"4104b82a45d2fcfed3afa79aceff2b6a\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "samsung_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/core-js-2.5.3/shim.min.js\"></script>\r\n<script src=\"site_libs/react-17.0.0/react.min.js\"></script>\r\n<script src=\"site_libs/react-17.0.0/react-dom.min.js\"></script>\r\n<script src=\"site_libs/reactwidget-1.0.0/react-tools.js\"></script>\r\n<script src=\"site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<link href=\"site_libs/reactable-0.4.1/reactable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/reactable-binding-0.4.1/reactable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}