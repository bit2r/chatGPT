{
  "hash": "3a7e52bc843050561264d1f016342bdf",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"계산기 프로그램\"\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    code-overflow: wrap\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\n   - custom-callout.lua   \nlightbox: auto\nlink-citations: yes\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n![](images/calculator.jpg)\n\n# CLI 계산기\n\n\nchatGPT에 지시명령어로 계산기 프로그램을 파이썬 언어로 작성하라는 하명을 내린다.\n계산기를 동작시키는 방식도 알려달라는 하명도 이어서 내린다.\n\n\n::: panel-tabset\n\n## 지시명령어\n\n::: {.callout-note collapse=\"true\"}\n### write python code of calculator\n\n![](images/coding_calculator.jpg)\n:::\n\n## 소스코드\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Simple calculator program\n\n# Function to add two numbers\ndef add(x, y):\n    return x + y\n\n# Function to subtract two numbers\ndef subtract(x, y):\n    return x - y\n\n# Function to multiply two numbers\ndef multiply(x, y):\n    return x * y\n\n# Function to divide two numbers\ndef divide(x, y):\n    return x / y\n\n# Display menu\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user\nchoice = input(\"Enter choice (1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Perform operation based on user's choice\nif choice == '1':\n    print(num1, \"+\", num2, \"=\", add(num1, num2))\n\nelif choice == '2':\n    print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\nelif choice == '3':\n    print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\nelif choice == '4':\n    print(num1, \"/\", num2, \"=\", divide(num1, num2))\n\nelse:\n    print(\"Invalid input\")\n```\n:::\n\n\n## &rarr;\n\n## 실행 지시명령어\n\n::: {.callout-note collapse=\"false\"}\n### how to run this python code\n\nPython 코드를 실행하려면 시스템에 Python이 설치되어 있어야 합니다. 다음 단계에 따라 간단한 계산기를 위한 Python 코드를 실행할 수 있습니다:\n\n1. 메모장이나 서브라인 텍스트와 같은 텍스트 편집기를 열고 Python 코드를 새 파일에 붙여넣습니다.\n1. 파일 확장명을 .py로 지정하여 저장합니다(예: calculator.py).\n1. 터미널 또는 명령 프롬프트 창을 엽니다.\n1. `cd` 명령을 사용하여 파일이 저장된 디렉토리로 이동합니다(예: `cd Documents\\Python`).\n1. `python calculator.py`를 입력하고 Enter 키를 눌러 프로그램을 실행합니다.\n\n그러면 프로그램이 실행되고 메뉴가 표시되며 사용자에게 원하는 연산과 숫자 두 개를 입력하라는 메시지가 표시됩니다. 사용자가 필요한 입력을 입력하면 프로그램이 해당 산술 연산을 수행하고 결과를 표시합니다.\n:::\n\n## 실행 사례\n\n![](images/coding_calculator_run.gif)\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxfun::embed_file(\"code/calculator.py\", text = \"계산기 소스코드 다운로드\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<a href=\"data:text/x-python;base64,IyBTaW1wbGUgY2FsY3VsYXRvciBwcm9ncmFtDQoNCiMgRnVuY3Rpb24gdG8gYWRkIHR3byBudW1iZXJzDQpkZWYgYWRkKHgsIHkpOg0KICAgIHJldHVybiB4ICsgeQ0KDQojIEZ1bmN0aW9uIHRvIHN1YnRyYWN0IHR3byBudW1iZXJzDQpkZWYgc3VidHJhY3QoeCwgeSk6DQogICAgcmV0dXJuIHggLSB5DQoNCiMgRnVuY3Rpb24gdG8gbXVsdGlwbHkgdHdvIG51bWJlcnMNCmRlZiBtdWx0aXBseSh4LCB5KToNCiAgICByZXR1cm4geCAqIHkNCg0KIyBGdW5jdGlvbiB0byBkaXZpZGUgdHdvIG51bWJlcnMNCmRlZiBkaXZpZGUoeCwgeSk6DQogICAgcmV0dXJuIHggLyB5DQoNCiMgRGlzcGxheSBtZW51DQpwcmludCgiU2VsZWN0IG9wZXJhdGlvbi4iKQ0KcHJpbnQoIjEuIEFkZCIpDQpwcmludCgiMi4gU3VidHJhY3QiKQ0KcHJpbnQoIjMuIE11bHRpcGx5IikNCnByaW50KCI0LiBEaXZpZGUiKQ0KDQojIFRha2UgaW5wdXQgZnJvbSB0aGUgdXNlcg0KY2hvaWNlID0gaW5wdXQoIkVudGVyIGNob2ljZSAoMS8yLzMvNCk6ICIpDQoNCm51bTEgPSBmbG9hdChpbnB1dCgiRW50ZXIgZmlyc3QgbnVtYmVyOiAiKSkNCm51bTIgPSBmbG9hdChpbnB1dCgiRW50ZXIgc2Vjb25kIG51bWJlcjogIikpDQoNCiMgUGVyZm9ybSBvcGVyYXRpb24gYmFzZWQgb24gdXNlcidzIGNob2ljZQ0KaWYgY2hvaWNlID09ICcxJzoNCiAgICBwcmludChudW0xLCAiKyIsIG51bTIsICI9IiwgYWRkKG51bTEsIG51bTIpKQ0KDQplbGlmIGNob2ljZSA9PSAnMic6DQogICAgcHJpbnQobnVtMSwgIi0iLCBudW0yLCAiPSIsIHN1YnRyYWN0KG51bTEsIG51bTIpKQ0KDQplbGlmIGNob2ljZSA9PSAnMyc6DQogICAgcHJpbnQobnVtMSwgIioiLCBudW0yLCAiPSIsIG11bHRpcGx5KG51bTEsIG51bTIpKQ0KDQplbGlmIGNob2ljZSA9PSAnNCc6DQogICAgcHJpbnQobnVtMSwgIi8iLCBudW0yLCAiPSIsIGRpdmlkZShudW0xLCBudW0yKSkNCg0KZWxzZToNCiAgICBwcmludCgiSW52YWxpZCBpbnB1dCIpDQogICAgDQo=\" download=\"calculator.py\">계산기 소스코드 다운로드</a>\n```\n:::\n:::\n\n\n\n\n# GUI 계산기\n\n\n이번에는 계산기에 GUI를 입혀 사용자가 좀더 쉽게 사용할 수 있도록 한다.\n다양한 GUI 패키지가 있지만 그중에서 `tkinter` 패키지 하나를 선정하여 개발을 이어나간다.\nchatGPT에 지시명령어로 계산기 프로그램을 파이썬 언어로 작성하라는 하명을 내린다.\n계산기를 동작시키는 방식도 알려달라는 하명도 이어서 내린다.\n\n\n::: panel-tabset\n\n## 지시명령어\n\n::: {.callout-note collapse=\"true\"}\n### please add gui with tkinter \n\nSure, here is an example of the same calculator program using the Tkinter library to create a graphical user interface (GUI):\n\n...\n\nIn this code, we first import the Tkinter library using the alias tk. Then we define four functions add(), subtract(), multiply(), and divide() that perform the corresponding arithmetic operations on the numbers entered by the user. Each function retrieves the input values from the Entry widgets using the get() method, performs the arithmetic operation, and updates the text of the Label widget to display the result.\n\nWe then create the main window using the Tk() constructor and set its title using the title() method. Next, we create two Label widgets and two Entry widgets to allow the user to enter the two numbers.\n\nWe also create four Button widgets, one for each arithmetic operation, and set their text and width. The command parameter is used to specify the function that should be called when the button is clicked.\n\nFinally, we create a Label widget to display the result of the arithmetic operation, and call the mainloop() method to start the event loop and display the GUI.\n\n:::\n\n## 소스코드\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport tkinter as tk\n\n# Function to perform addition\ndef add():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 + num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform subtraction\ndef subtract():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 - num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform multiplication\ndef multiply():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 * num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n\n# Function to perform division\ndef divide():\n    try:\n        num1 = float(entry_num1.get())\n        num2 = float(entry_num2.get())\n        result = num1 / num2\n        label_result.config(text=\"Result: \" + str(result))\n    except ValueError:\n        label_result.config(text=\"Invalid input\")\n    except ZeroDivisionError:\n        label_result.config(text=\"Cannot divide by zero\")\n\n# Create the main window\nwindow = tk.Tk()\nwindow.title(\"Simple Calculator\")\n\n# Create the number input fields\nlabel_num1 = tk.Label(window, text=\"Number 1:\")\nlabel_num1.pack()\nentry_num1 = tk.Entry(window)\nentry_num1.pack()\n\nlabel_num2 = tk.Label(window, text=\"Number 2:\")\nlabel_num2.pack()\nentry_num2 = tk.Entry(window)\nentry_num2.pack()\n\n# Create the operation buttons\nbutton_add = tk.Button(window, text=\"+\", width=10, command=add)\nbutton_add.pack()\n\nbutton_subtract = tk.Button(window, text=\"-\", width=10, command=subtract)\nbutton_subtract.pack()\n\nbutton_multiply = tk.Button(window, text=\"*\", width=10, command=multiply)\nbutton_multiply.pack()\n\nbutton_divide = tk.Button(window, text=\"/\", width=10, command=divide)\nbutton_divide.pack()\n\n# Create the result label\nlabel_result = tk.Label(window, text=\"Result: \")\nlabel_result.pack()\n\n# Run the main loop\nwindow.mainloop()\n```\n:::\n\n\n## &rarr;\n\n## 실행 지시명령어\n\n::: {.callout-note collapse=\"false\"}\n### how to run this python code\n\nPython 코드를 실행하려면 시스템에 Python이 설치되어 있어야 합니다. 다음 단계에 따라 간단한 계산기를 위한 Python 코드를 실행할 수 있습니다:\n\n1. 메모장이나 서브라인 텍스트와 같은 텍스트 편집기를 열고 Python 코드를 새 파일에 붙여넣습니다.\n1. 파일 확장명을 .py로 지정하여 저장합니다(예: calculator.py).\n1. 터미널 또는 명령 프롬프트 창을 엽니다.\n1. `cd` 명령을 사용하여 파일이 저장된 디렉토리로 이동합니다(예: `cd Documents\\Python`).\n1. `python calculator.py`를 입력하고 Enter 키를 눌러 프로그램을 실행합니다.\n\n그러면 프로그램이 실행되고 메뉴가 표시되며 사용자에게 원하는 연산과 숫자 두 개를 입력하라는 메시지가 표시됩니다. 사용자가 필요한 입력을 입력하면 프로그램이 해당 산술 연산을 수행하고 결과를 표시합니다.\n:::\n\n## 실행 사례\n\n![](images/coding_calculator_gui_run.gif)\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxfun::embed_file(\"code/calculator_gui.py\", text = \"계산기 소스코드 GUI 버전 다운로드\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<a href=\"data:text/x-python;base64,aW1wb3J0IHRraW50ZXIgYXMgdGsNCg0KIyBGdW5jdGlvbiB0byBwZXJmb3JtIGFkZGl0aW9uDQpkZWYgYWRkKCk6DQogICAgdHJ5Og0KICAgICAgICBudW0xID0gZmxvYXQoZW50cnlfbnVtMS5nZXQoKSkNCiAgICAgICAgbnVtMiA9IGZsb2F0KGVudHJ5X251bTIuZ2V0KCkpDQogICAgICAgIHJlc3VsdCA9IG51bTEgKyBudW0yDQogICAgICAgIGxhYmVsX3Jlc3VsdC5jb25maWcodGV4dD0iUmVzdWx0OiAiICsgc3RyKHJlc3VsdCkpDQogICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgIGxhYmVsX3Jlc3VsdC5jb25maWcodGV4dD0iSW52YWxpZCBpbnB1dCIpDQoNCiMgRnVuY3Rpb24gdG8gcGVyZm9ybSBzdWJ0cmFjdGlvbg0KZGVmIHN1YnRyYWN0KCk6DQogICAgdHJ5Og0KICAgICAgICBudW0xID0gZmxvYXQoZW50cnlfbnVtMS5nZXQoKSkNCiAgICAgICAgbnVtMiA9IGZsb2F0KGVudHJ5X251bTIuZ2V0KCkpDQogICAgICAgIHJlc3VsdCA9IG51bTEgLSBudW0yDQogICAgICAgIGxhYmVsX3Jlc3VsdC5jb25maWcodGV4dD0iUmVzdWx0OiAiICsgc3RyKHJlc3VsdCkpDQogICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgIGxhYmVsX3Jlc3VsdC5jb25maWcodGV4dD0iSW52YWxpZCBpbnB1dCIpDQoNCiMgRnVuY3Rpb24gdG8gcGVyZm9ybSBtdWx0aXBsaWNhdGlvbg0KZGVmIG11bHRpcGx5KCk6DQogICAgdHJ5Og0KICAgICAgICBudW0xID0gZmxvYXQoZW50cnlfbnVtMS5nZXQoKSkNCiAgICAgICAgbnVtMiA9IGZsb2F0KGVudHJ5X251bTIuZ2V0KCkpDQogICAgICAgIHJlc3VsdCA9IG51bTEgKiBudW0yDQogICAgICAgIGxhYmVsX3Jlc3VsdC5jb25maWcodGV4dD0iUmVzdWx0OiAiICsgc3RyKHJlc3VsdCkpDQogICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgIGxhYmVsX3Jlc3VsdC5jb25maWcodGV4dD0iSW52YWxpZCBpbnB1dCIpDQoNCiMgRnVuY3Rpb24gdG8gcGVyZm9ybSBkaXZpc2lvbg0KZGVmIGRpdmlkZSgpOg0KICAgIHRyeToNCiAgICAgICAgbnVtMSA9IGZsb2F0KGVudHJ5X251bTEuZ2V0KCkpDQogICAgICAgIG51bTIgPSBmbG9hdChlbnRyeV9udW0yLmdldCgpKQ0KICAgICAgICByZXN1bHQgPSBudW0xIC8gbnVtMg0KICAgICAgICBsYWJlbF9yZXN1bHQuY29uZmlnKHRleHQ9IlJlc3VsdDogIiArIHN0cihyZXN1bHQpKQ0KICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICBsYWJlbF9yZXN1bHQuY29uZmlnKHRleHQ9IkludmFsaWQgaW5wdXQiKQ0KICAgIGV4Y2VwdCBaZXJvRGl2aXNpb25FcnJvcjoNCiAgICAgICAgbGFiZWxfcmVzdWx0LmNvbmZpZyh0ZXh0PSJDYW5ub3QgZGl2aWRlIGJ5IHplcm8iKQ0KDQojIENyZWF0ZSB0aGUgbWFpbiB3aW5kb3cNCndpbmRvdyA9IHRrLlRrKCkNCndpbmRvdy50aXRsZSgiU2ltcGxlIENhbGN1bGF0b3IiKQ0KDQojIENyZWF0ZSB0aGUgbnVtYmVyIGlucHV0IGZpZWxkcw0KbGFiZWxfbnVtMSA9IHRrLkxhYmVsKHdpbmRvdywgdGV4dD0iTnVtYmVyIDE6IikNCmxhYmVsX251bTEucGFjaygpDQplbnRyeV9udW0xID0gdGsuRW50cnkod2luZG93KQ0KZW50cnlfbnVtMS5wYWNrKCkNCg0KbGFiZWxfbnVtMiA9IHRrLkxhYmVsKHdpbmRvdywgdGV4dD0iTnVtYmVyIDI6IikNCmxhYmVsX251bTIucGFjaygpDQplbnRyeV9udW0yID0gdGsuRW50cnkod2luZG93KQ0KZW50cnlfbnVtMi5wYWNrKCkNCg0KIyBDcmVhdGUgdGhlIG9wZXJhdGlvbiBidXR0b25zDQpidXR0b25fYWRkID0gdGsuQnV0dG9uKHdpbmRvdywgdGV4dD0iKyIsIHdpZHRoPTEwLCBjb21tYW5kPWFkZCkNCmJ1dHRvbl9hZGQucGFjaygpDQoNCmJ1dHRvbl9zdWJ0cmFjdCA9IHRrLkJ1dHRvbih3aW5kb3csIHRleHQ9Ii0iLCB3aWR0aD0xMCwgY29tbWFuZD1zdWJ0cmFjdCkNCmJ1dHRvbl9zdWJ0cmFjdC5wYWNrKCkNCg0KYnV0dG9uX211bHRpcGx5ID0gdGsuQnV0dG9uKHdpbmRvdywgdGV4dD0iKiIsIHdpZHRoPTEwLCBjb21tYW5kPW11bHRpcGx5KQ0KYnV0dG9uX211bHRpcGx5LnBhY2soKQ0KDQpidXR0b25fZGl2aWRlID0gdGsuQnV0dG9uKHdpbmRvdywgdGV4dD0iLyIsIHdpZHRoPTEwLCBjb21tYW5kPWRpdmlkZSkNCmJ1dHRvbl9kaXZpZGUucGFjaygpDQoNCiMgQ3JlYXRlIHRoZSByZXN1bHQgbGFiZWwNCmxhYmVsX3Jlc3VsdCA9IHRrLkxhYmVsKHdpbmRvdywgdGV4dD0iUmVzdWx0OiAiKQ0KbGFiZWxfcmVzdWx0LnBhY2soKQ0KDQojIFJ1biB0aGUgbWFpbiBsb29wDQp3aW5kb3cubWFpbmxvb3AoKQ0K\" download=\"calculator_gui.py\">계산기 소스코드 GUI 버전 다운로드</a>\n```\n:::\n:::\n\n\n\n# 테스트\n\n계산기 프로그램이 정상동작하는지 확인하는 코드를 작성하자.\n만약 단위 테스트 결과가 모두 정상동작한다면 믿고 현업에서 사용하게 된다.\n\n::: panel-tabset\n\n## 지시명령어\n\n::: {.callout-note collapse=\"true\"}\n### first write python program for calculator and then test result from execution\n\nHere's the Python code for a simple calculator that supports addition, subtraction, multiplication, and division. We'll create a separate file for the test cases, which will import and run the calculator functions.\n\nSave the following code as calculator.py:\n\n```python\nclass Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return a / b\n```\n\nNow, create a new file named test_calculator.py and save the following code in it:\n\n```python\nfrom calculator import Calculator\n\ndef test_calculator():\n    calc = Calculator()\n\n    # Test addition\n    assert calc.add(2, 3) == 5, \"Test case 1 failed\"\n    assert calc.add(-2, 3) == 1, \"Test case 2 failed\"\n\n    # Test subtraction\n    assert calc.subtract(5, 3) == 2, \"Test case 3 failed\"\n    assert calc.subtract(0, -5) == 5, \"Test case 4 failed\"\n\n    # Test multiplication\n    assert calc.multiply(3, 4) == 12, \"Test case 5 failed\"\n    assert calc.multiply(-2, 5) == -10, \"Test case 6 failed\"\n\n    # Test division\n    assert calc.divide(10, 2) == 5, \"Test case 7 failed\"\n    assert calc.divide(-10, 5) == -2, \"Test case 8 failed\"\n\n    # Test division by zero\n    try:\n        calc.divide(10, 0)\n    except ValueError as e:\n        assert str(e) == \"Cannot divide by zero\", \"Test case 9 failed\"\n\n    print(\"All test cases passed\")\n\nif __name__ == \"__main__\":\n    test_calculator()\n```\n\nTo execute the test cases, open a terminal or command prompt and navigate to the directory containing both calculator.py and test_calculator.py. Then run the following command:\n\n```bash\npython test_calculator.py\n```\n\nIf all test cases pass, you'll see \"All test cases passed\" printed on the console.\n\n:::\n\n## 실행결과\n\n![](images/coding_calculator_test.jpg)\n\n:::\n\n\n# `.exe` 배포\n\nCLI를 통해 기능을 검증한 후 GUI로 사용자가 사용하기 쉬운 인터페이스를 구현하였다면 \n다음 단계로 배포를 한다. 다양한 배포 프로그램이 존재하지만 가장 쉽게 `.exe` 파일을 만드는 방법을 살펴보자.\n\n\n::: panel-tabset\n\n## 지시명령어\n\n::: {.callout-note collapse=\"true\"}\n### I am a pyhton developer. I have a simple python calculator. I'd like to deploy this program into Windows. **let me know how to create a standalone executable file**\n\nTo create a standalone executable file for your Python calculator, you can use a tool like PyInstaller or cx_Freeze. Here are the general steps to follow:\n\nInstall PyInstaller: You can use pip to install PyInstaller. Open a command prompt or terminal and run the following command:\n\n```\npip install pyinstaller\n```\n\nCreate a spec file: PyInstaller requires a spec file that describes your Python program and its dependencies. To create a spec file with PyInstaller, run the following command:\n\n```\npyinstaller --name=calculator --onefile calculator.py\n```\n\nBuild the executable: To build the executable file with PyInstaller, run the following command:\n\n```\npyinstaller calculator.spec\n```\n\nThis will create a standalone executable file in the dist directory.\nTest the executable file: Run the executable file on a Windows machine to make sure it works as expected.\n\nBy following these steps, you can create a standalone executable file for your Python calculator using PyInstaller.\n\n:::\n\n## 실행결과\n\n![](images/calculator_exe.jpg)\n\n## 파이썬 코드\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport tkinter as tk\n\nclass Calculator:\n    def __init__(self, master):\n        self.master = master\n        self.master.title(\"Calculator\")\n\n        # Create display\n        self.display = tk.Entry(self.master, width=30, borderwidth=5, justify=tk.RIGHT)\n        self.display.grid(row=0, column=0, columnspan=4, padx=10, pady=10)\n\n        # Define buttons\n        button_list = [\"7\", \"8\", \"9\", \"/\", \"4\", \"5\", \"6\", \"*\", \"1\", \"2\", \"3\", \"-\", \"0\", \".\", \"C\", \"+\"]\n\n        # Create buttons\n        row = 1\n        col = 0\n        for button in button_list:\n            command = lambda x=button: self.button_click(x)\n            tk.Button(self.master, text=button, padx=20, pady=10, command=command).grid(row=row, column=col)\n            col += 1\n            if col > 3:\n                row += 1\n                col = 0\n\n        # Create equals button\n        tk.Button(self.master, text=\"=\", padx=50, pady=10, command=self.calculate).grid(row=row, column=0, columnspan=4)\n\n    def button_click(self, button):\n        if button == \"C\":\n            self.display.delete(0, tk.END)\n        else:\n            self.display.insert(tk.END, button)\n\n    def calculate(self):\n        try:\n            result = eval(self.display.get())\n            self.display.delete(0, tk.END)\n            self.display.insert(0, result)\n        except:\n            self.display.delete(0, tk.END)\n            self.display.insert(0, \"Error\")\n\n# Create window\nroot = tk.Tk()\n\n# Create calculator\ncalculator = Calculator(root)\n\n# Run window\nroot.mainloop()\n```\n:::\n\n\n## `.spec` 파일\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# -*- mode: python ; coding: utf-8 -*-\n\nblock_cipher = None\n\n\na = Analysis(\n    ['calculator.py'],\n    pathex=[],\n    binaries=[],\n    datas=[],\n    hiddenimports=[],\n    hookspath=[],\n    hooksconfig={},\n    runtime_hooks=[],\n    excludes=[],\n    win_no_prefer_redirects=False,\n    win_private_assemblies=False,\n    cipher=block_cipher,\n    noarchive=False,\n)\npyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)\n\nexe = EXE(\n    pyz,\n    a.scripts,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    [],\n    name='calculator',\n    debug=False,\n    bootloader_ignore_signals=False,\n    strip=False,\n    upx=True,\n    upx_exclude=[],\n    runtime_tmpdir=None,\n    console=True,\n    disable_windowed_traceback=False,\n    argv_emulation=False,\n    target_arch=None,\n    codesign_identity=None,\n    entitlements_file=None,\n)\n```\n:::\n\n\n## 디렉토리 구조\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree('code/calculator_exe/')\n#> code/calculator_exe/\n#> ├── build\n#> │   └── calculator\n#> │       ├── Analysis-00.toc\n#> │       ├── base_library.zip\n#> │       ├── calculator.exe.manifest\n#> │       ├── calculator.pkg\n#> │       ├── EXE-00.toc\n#> │       ├── localpycs\n#> │       │   ├── pyimod01_archive.pyc\n#> │       │   ├── pyimod02_importers.pyc\n#> │       │   ├── pyimod03_ctypes.pyc\n#> │       │   ├── pyimod04_pywin32.pyc\n#> │       │   └── struct.pyc\n#> │       ├── PKG-00.toc\n#> │       ├── PYZ-00.pyz\n#> │       ├── PYZ-00.toc\n#> │       ├── Tree-00.toc\n#> │       ├── Tree-01.toc\n#> │       ├── Tree-02.toc\n#> │       ├── warn-calculator.txt\n#> │       └── xref-calculator.html\n#> ├── calculator.py\n#> ├── calculator.spec\n#> └── dist\n#>     └── calculator.exe\n```\n:::\n\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}