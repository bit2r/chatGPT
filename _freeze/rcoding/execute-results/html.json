{
  "hash": "7d3ef98d4a9d146f7b00ce3091bff9b4",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"R 코딩개발\"\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    code-overflow: wrap\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\n   - custom-callout.lua   \nlightbox: auto\nlink-citations: yes\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# 코덱스(Codex)\n\n[[Low-code and GPT-3: easier said than done with OpenAI Codex](https://medium.com/data-reply-it-datatech/low-code-and-gpt-3-easier-said-than-done-with-openai-codex-d3c1d4aebc8b)]{.aside}\n\n**코덱스(Codex)**는 OpenAI에서 개발한 획기적인 AI 기술로, 사용자가 입력한 질문에 응답하여 사람과 유사한 텍스트를 생성할 수 있다. \n딥러닝 알고리즘을 사용하여 책, 기사 및 기타 형태의 서면 콘텐츠를 포함한 방대한 양의 텍스트 데이터를 분석하여 언어와 문맥에 대한 포괄적인 이해를 바탕으로 텍스트를 생성한다.코덱스는 챗봇, 가상 비서, 글쓰기 도구 등 다양한 애플리케이션과 통합하여 사용자에게 자연스럽고 유창한 텍스트 응답을 제공한다. \n\n코덱스의 프로그래밍 기능은 가장 강력한 애플리케이션 중 하나로 방대한 양의 코드와 문서를 분석하여 사용자가 제공한 \n지시명령어(Prompt)에 응답하여 코드 스니펫(Snippet)을 생성할 수 있으므로 코드를 보다 효율적이고 정확하게 작성해야 하는 개발자에게 매우 유용한 도구로 자리잡아가고 있다.\n\n코덱스는 파이썬, 자바, C++, R 등 다양한 프로그래밍 언어와 함께 사용할 수 있으며,\n현재 코드 맥락(Context)에 따라 전체 함수나 클래스를 생성할 수 있으며, 구문적으로 정확하고 모범 사례(Best Practice)를 \n따르는 코드를 제안함으로써 코드 작성에 필요한 시간과 노력을 줄여 개발자가 새로운 기능을 설계하거나 기존 기능을 개선하는 등 보다 복잡한 작업에 집중할 수 있게 한다.\n\n코덱스의 프로그래밍 기능의 주요 이점 중 하나는 생성하는 코드의 의미와 목적을 이해한다는 점이다. \n즉, 작동할 뿐만 아니라 구조적으로 강건하고 읽기 쉬운 코드를 제안하여 오류를 줄이고 \n코드베이스의 전반적인 품질을 개선하는 데 도움을 준다. 전반적으로 코덱스의 프로그래밍 기능은 개발자의 코드 작성 방식에 혁신을 가져올 잠재력을 가지고 있다. \n\n- 주석을 코드로 전환\n- 맥락을 보고 다음 코드를 자동 작성\n- 라이브러리, API 등 추천을 통해 새로운 지식 전달\n- 주석 자동 추가\n- 동일한 기능을 갖지면 효율성 좋은 코드로 변환\n\n\n# `gpttools` 패키지\n\n[`gpttools`](https://github.com/JamesHWade/gpttools)의 목표는 R 패키지 개발자가 초거대 언어 모델(LLM)을 프로젝트 \n작업흐름에 보다 쉽게 통합할 수 있도록 [gptstudio](https://github.com/MichelNivard/gptstudio)를 확장하는 것이다. \n초거대 언어 모델은 지식 작업에 텍스트를 사용하는 데 있어 한 걸음 더 나아간 것으로 보이지만, \n초거대 언어 모델을 사용하는 데 따른 윤리적 영향도 신중하게 고려해야 한다. \nLLM(근간 모형, Foundation Model)의 윤리는 매우 활발하게 논의되고 있는 분야 중 하나다.\n\n## 설치\n\n[gpttools](https://github.com/JamesHWade/gpttools) GitHub 저장소에서 바로 설치한다.\n\n``` r\nrequire(remotes)\nremotes::install_github(\"JamesHWade/gpttools\")\n```\n\n\n# 사용방법\n\n민감한 개인정보나 기타 데이터를 전송하지 않도록 주의한다. \n\n사용방법은 텍스트 혹은 코드를 커서로 선택하여 add-in 명령어를 사용하여 \nOpenAI로 보내면 Codex가 이를 해석하여 최선의 답을 다시 전달해주는 간단한 구조로 되어 있다.\n\n\n[See OpenAI's Terms of Use at <https://openai.com/terms> for more\ndetails.]{.aside}\n\n# 사전준비사항\n\n1.   OpenAI 계정생성\n\n2.  [OpenAI API key](https://beta.openai.com/account/api-keys) 생성\n\n3.  RStudio 에서 `OPENAI_API_KEY` 값을 접근할 수 있도록 설정\n\n직접적으로 추천하지는 않지만, 개발용도로 한번 쓰고 버릴 때 적합.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(OPENAI_API_KEY = \"<OPENAI_API_KEY>\")\n```\n:::\n\n\n`.Renviron` 파일에 `OPENAI_API_KEY` 환경변수값을 참조하여 사용하는 방법을 추천.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(usethis)\nedit_r_environ(scope = \"project\")\n```\n:::\n\n\nGitHub/Gitlab을 사용할 때, `.Renviron` 파일 정보를 `.gitignore`에 추가하는 것을 잊지 않는다.\n\n# 사용법\n\n`gpttools`는 다음 4가지 addins 기능을 포함:\n\n-   주석 달리(Comment code): uses code-davinci-edit-001 model from OpenAI to add\n    comments to your code with the prompt: \"add comments to each line of\n    code, explaining what the code does\"\n\n-   roxygen 추가: uses text-davinci-003 model from OpenAI to add and fill\n    out a roxygen skeleton to your highlight code (should be a function)\n    with the prompt: \"insert roxygen skeleton to document this function\"\n\n-   스크립트를 함수로 전환: uses code-davinci-edit-001 model from\n    OpenAI to convert a highlighted script into a function with the\n    prompt: \"convert this R code into an R function\"\n\n-   `testthat` 단위테스트 작성: uses\n    text-davinci-003 model from OpenAI to suggest a unit test for a\n    selected function with the prompt: \"Suggest a unit text for this\n    function using the testthat package\"\n\n-   A freeform addins that let's you specify the prompt using the \"edit\"\n    functionality of ChatGPT\n\n`gpttools` addins은 `CMD/CTRL+SHIFT+P` 를 클릭하여 선택가능.\n\n\n![](images/gpttools/gpttools-addins.png)\n\n:::{.panel-tabset}\n\n## 주석달기\n\n<video src=\"https://user-images.githubusercontent.com/6314313/209890944-3d6a00fa-2d8c-4df7-8a11-f5a5ec3a1391.mov\" data-canonical-src=\"https://user-images.githubusercontent.com/6314313/209890944-3d6a00fa-2d8c-4df7-8a11-f5a5ec3a1391.mov\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 width-fit\" style=\"max-height:640px;\">\n\n</video>\n\n## Roxygen 추가\n\n<video src=\"https://user-images.githubusercontent.com/6314313/209890939-ebd7afea-7d68-40b4-b482-b3fe51485ab1.mov\" data-canonical-src=\"https://user-images.githubusercontent.com/6314313/209890939-ebd7afea-7d68-40b4-b482-b3fe51485ab1.mov\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 width-fit\" style=\"max-height:640px;\">\n\n</video>\n\n## 스크립트 &rarr; 함수\n\n<video src=\"https://user-images.githubusercontent.com/6314313/209890949-4da2bdd7-bcac-4769-9b11-7759b4abb760.mov\" data-canonical-src=\"https://user-images.githubusercontent.com/6314313/209890949-4da2bdd7-bcac-4769-9b11-7759b4abb760.mov\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 width-fit\" style=\"max-height:640px;\">\n\n</video>\n\n## 함수에 단위 테스트 추천\n\n<video src=\"https://user-images.githubusercontent.com/6314313/209890959-fca623d9-5e8e-463c-ac64-80f3db9875d9.mov\" data-canonical-src=\"https://user-images.githubusercontent.com/6314313/209890959-fca623d9-5e8e-463c-ac64-80f3db9875d9.mov\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 width-fit\" style=\"max-height:640px;\">\n\n</video>\n\n:::\n\n# 예측모형\n\n펭귄데이터셋 암수성별을 분류예측모형을 개발하도록 지시명령어를 자세히 준비하여 chatGPT \n실행을 시킨다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openai)\n\npenguins_classification_instruction <- \n  glue::glue(\"# R language\\n\",\n             \"Build sex classification machine learning model withe palmer penguin datatset\\n\",\n             \"Use palmer penguins data package for dataset\\n\",\n             \"Use tidymodels framework\\n\",\n             \"Use random forest model\\n\",\n             \"Include evaluation metrics including accruacy, precision, reall\")\n\nbuild_model <- create_completion(\n    model=\"code-davinci-002\",\n    prompt = penguins_classification_instruction,\n    max_tokens=1024,\n    openai_api_key = Sys.getenv(\"OPEN_AI_KEY\")\n)\n\nparsed_code <- str_split(build_model$choices$text, \"\\n\")[[1]]\n\nwrite_lines(parsed_code, \"palmer_penguins.Rmd\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}