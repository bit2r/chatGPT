{
  "hash": "a433feebaf9ac342af31b9f16dda3b8e",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"~~노동자~~ 개발자 날\"\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\nlightbox: auto\nlink-citations: true\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\nbibliography: bibliography.bib\ncsl: apa-single-spaced.csl    \neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n# OpenAI 개발자 날\n\n[[New models and developer products announced at DevDay](https://openai.com/blog/new-models-and-developer-products-announced-at-devday)]{.aside}\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/U9mJuUkhUzk?si=92ZTbuZUuL8wZwUW\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n\n# 챗GPT-4 터보\n\n## 최근 지식\n\n2021년 9월 → 2023년 4월\n\n::: panel-tabset\n### GPT3-5-turbo\n\n![2023년 11월 7일 기준](images/chatGPT4_turbo/gpt_3_5_turbo.jpg)\n\n### GPT-4 + 빙검색\n\n![2023년 11월 7일 기준](images/chatGPT4_turbo/gpt_4_bing.jpg)\n\n### GPT-4\n\n![2023년 11월 7일 기준](images/chatGPT4_turbo/gpt_4.jpg)\n\n### GPT-4 터보\n\n![2023년 11월 7일 기준](images/chatGPT4_turbo/gpt_4_turbo.jpg)\n:::\n\n## 맥락 크기\n\n|   구분   |  GPT-4 Turbo  | GPT-4 32K | GPT-3.5 Turbo |\n|:--------:|:-------------:|:-------------:|:-------------:|\n| 문맥 창  | 128,000 토큰  |  32,000 토큰  |  8,192 토큰   |\n| 페이지수 |   약 300 쪽   |   약 75 쪽    |   약 19 쪽    |\n|   기준   | 427 토큰 / 쪽 | 427 토큰 / 쪽 | 427 토큰 / 쪽 |\n\n## 비용\n\n환율(1,300월/1달러)을 적용하여 1,000개 토큰 기준 비용을 산출하면 `GPT-4 Turbo`가 `GPT-4` 와 비교하면 입력기준 $\\frac{1}{3}$ 저렴하다.\n\n|     모형      | 입력(1K 토큰) | 출력(1K 토큰) |\n|:-------------:|:--------------------:|:--------------------:|\n|  GPT-4 Turbo  |   **13.0원**        |       **39.0원**    |\n|     GPT-4     |       39.0원        |       78.0원        |\n|   GPT-4 32k   |       78.0원        |       156.0원       |\n| GPT-3.5 Turbo |        1.3원        |        2.6원        |\n| Assistant API |       19.5원        |          \\-          |\n\n## 다중 모드성\n\n\"GPT-4 터보\"는 **다중 모드성(Multimodality)**를 제공한다. 과거 텍스트, 이미지, 오디오 각각 다른 모드로 제공된 것이 \"GPT-4 터보\"에서 통합되어 제공된다.\n\n- 텍스트(GPT-4)\n- 이미지(DALL-E 3)\n- 오디오(Whisper)\n\n## GPT 플러그인\n\n컴퓨터와 디지털 기술이 발전함에 따라 소프트웨어는 끊임없이 진화해왔다. 초기에는 기본적인 설치형 소프트웨어가 주를 이루었으며, 이는 특정 작업을 수행하기 위해 물리적 매체를 통해 컴퓨터에 직접 설치되어 사용된다. 사용자는 소프트웨어를 구매하고 소유하는 개념을 가지고 있었다. \n\n그 다음에는 웹 소프트웨어가 등장한다. 인터넷의 보급으로 클라우드 기반의 서비스들이 생겨나기 시작하면서, 사용자들은 언제 어디서나 접속 가능한 웹 애플리케이션을 이용하게 된다. 설치 필요 없이 브라우저를 통해 접근하는 이 모형은 편의성을 극대화했다.\n\n이후 스마트폰의 보편화와 함께 앱 소프트웨어가 급부상한다. 앱 스토어를 통해 다운로드받아 모바일 기기에 설치하는 이 모형은 휴대성과 접근성을 강화하며 대중의 일상 속으로 깊숙이 들어간다.\n\n마지막으로, 인공지능의 발달은 GPT와 같은 플러그인 소프트웨어의 출현을 가져온다. 이들은 기존의 플랫폼이나 소프트웨어에 부가적으로 통합되어, 사용자 경험을 개인화하고, 향상시키는 역할을 한다. 사용자는 이제 복잡한 명령어를 입력하거나 전문 지식이 없어도 고도의 기능을 이용할 수 있게 되었다.\n\n\n:::{layout-nrow=\"1\"}\n\n![설치형 SW](images/chatGPT4_turbo/plugins_01_disk.png)\n\n![웹 SW](images/chatGPT4_turbo/plugins_02_web.jpg.png)\n\n![스마트폰 앱SW](images/chatGPT4_turbo/plugins_03_app.png)\n\n\n![GPT 플러그인](images/chatGPT4_turbo/plugins_04_gpt.png)\n\n:::\n\n![](images/chatGPT4_turbo/openai_ecosystem.png)\n\n## 저작권 보험\n\nOpenAI는 만약 고객이 OpenAI의 서비스를 사용하다가 저작권 침해와 관련된 법적 문제에 직면했을 때, 법적 책임을 질 준비가 되어 있다고 공표했다. 이것은 저작권 침해에 대한 '보험'과도 같다. 구글이나 마이크로소프트와 같은 다른 대형 기술 회사들도 비슷한 약속을 해왔으며, 이로써 사용자는 해당 회사의 서비스를 사용함에 있어서 발생할 수 있는 저작권 문제에 대해 좀 더 안심하고 서비스를 이용할 수 있게 되었다. OpenAI의 이런 조치는 고객이 만약 저작권 침해로 인해 법적으로 고소를 당하게 되더라도, OpenAI가 나서서 문제를 해결하고, 필요한 법적 조치를 취해주겠다는 것을 의미한다.\n\n# GPT 스토어\n\nGPT 빌더(Builder)를 사용하면, 코딩 경험이 없어도 개인적 용도에 맞춘 맞춤형 GPT를 만들 수 있다. 예를 들어, 자신의 요리비법에 대한 지식을 가진 GPT를 만들어 빠르게 필요한 재료를 물어보고 음식을 제작할 수 있고, 개발자나 기업은 자체 독점 코드에 대해 훈련된 GPT를 만들어 다른 개발자들이 이를 바탕으로 앱개발을 신속히 할 수 있다.\n\nGPT 스토어(Store)는 GPT 빌더로 제작된 GPT들이 배포되고 수익화될 플랫폼이 될 것이다. 스마트폰이 처음 나왔을 때 앱스토어가 했던 역할을 GPT 스토어가 담당하게 된다. GPT 빌더로 제작된 검증된 GPTs는 스토어에 등록되면 GPT 스토어에서 검색 가능해지고 앱스토어처럼 오늘의 앱 순위표 상단에 오를 수 있다. 생산성, 교육, 게임과 같은 범주를 확장해 나갈 것이다. 스마트폰 앱스토어에서 수익을 창출하듯이 GPT 스토어에서 수익을 창출해나가게 된다. [^gpt-store]\n\n:::{layout-nrow=\"1\"}\n\n![OpenAI GPT 빌더](images/chatGPT4_turbo/gpt_builder.jpg)\n\n![OpenAI GPT 스토어](images/chatGPT4_turbo/GPT_Store.jpg)\n\n:::\n\n[^gpt-store]: [App Store for AI: OpenAI’s GPT Store lets you build (and monetize) your own GPT](https://techcrunch.com/2023/11/06/app-store-for-ai-build-your-own-gpt-and-sell-it-on-openais-gpt-store/)\n\n\n# 개발자 API\n\n## 날씨 API\n\n[OpenWeather](https://openweathermap.org/) API를 가져와서 현재 날씨를 가져온다.\n`location`에 서울(seoul)을 넣으면, 서울의 현재 날씨를 가져온다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests \nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()  # This loads the environment variables from .env\n\n# Now you can use these variables using os.environ\nWEATHER_API_KEY = os.getenv('WEATHER_API_KEY')\n\n# 현재 날씨를 가져오는 함수를 정의한다.\ndef get_current_weather(location, unit='celsius'):\n    # 여기에 실제 날씨 API로 요청을 보내는 코드를 작성한다.\n    # 예를 들어, OpenWeatherMap API를 사용할 수 있다. (API 키가 필요하다)\n    # API_ENDPOINT는 사용하는 날씨 API의 엔드포인트 URL이다.\n    API_ENDPOINT = 'http://api.openweathermap.org/data/2.5/weather'\n    API_KEY = WEATHER_API_KEY  # 실제 날씨 API 키\n\n    params = {\n        'q': location,\n        'appid': API_KEY,\n        'units': 'metric' if unit == 'celsius' else 'imperial'\n    }\n    response = requests.get(API_ENDPOINT, params=params)\n    weather_data = response.json()\n    \n    # 가정: weather_data에는 날씨 정보가 JSON 형태로 들어 있다.\n    return weather_data\n\nget_current_weather(\"seoul\")\n```\n:::\n\n\n```bash\n{'coord': {'lon': 126.9778, 'lat': 37.5683}, 'weather': [{'id': 800, 'main': 'Clear', 'description': 'clear sky', 'icon': '01n'}], 'base': 'stations', 'main': {'temp': 6.51, 'feels_like': 6.51, 'temp_min': 5.66, 'temp_max': 7.69, 'pressure': 1022, 'humidity': 81}, 'visibility': 10000, 'wind': {'speed': 0.51, 'deg': 150}, 'clouds': {'all': 0}, 'dt': 1699449426, 'sys': {'type': 1, 'id': 8105, 'country': 'KR', 'sunrise': 1699394614, 'sunset': 1699432081}, 'timezone': 32400, 'id': 1835848, 'name': 'Seoul', 'cod': 200}\n```\n\n\n## 챗GPT 날씨\n\n챗GPT를 사용하여 서울 날씨를 물어보면 다음과 같이 대답한다.\n현재 서울의 날씨를 직접 확인할 수는 없다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nimport openai\n\n# OpenAI API를 사용할 준비를 한다.\nOPENAI_API_KEY = os.getenv('OPEN_API_KEY')\nopenai.api_key = OPENAI_API_KEY\n\n# 대화형 챗봇 모형을 이용하여 서울 날씨에 대한 대화를 시작한다.\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"user\", \n        \"content\": \"서울 날씨는 어떠하냐?\"}\n    ]\n)\n\n# 응답 결과를 출력한다.\nprint(response['choices'][0]['message']['content'])\n```\n:::\n\n\n```bash\n저는 인공지능이므로 실시간으로 날씨 정보를 제공할 수 없습니다. 하지만 서울의 날씨 정보는 기상청 등의 날씨 사이트나 기상앱에서 확인하실 수 있습니다. 또는 \"서울 날씨\"라고 검색하시면 해당 정보가 나올 것입니다.\n```\n\n\n## Function calling\n\n함수 호출(function calling)을 활용한 사례를 살펴보자. [^function-calling]\n\n[^function-calling]: [OpenAI Function Calling Tutorial](https://www.datacamp.com/tutorial/open-ai-function-calling-tutorial)\n\n### 한번 진행\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport json\nfrom datetime import date\n\nstudent_1_description = \"David Nguyen is a sophomore majoring in computer science at Stanford University. He is Asian American and has a 3.8 GPA. David is known for his programming skills and is an active member of the university's Robotics Club. He hopes to pursue a career in artificial intelligence after graduating.\"\n\nstudent_2_description=\"Ravi Patel is a sophomore majoring in computer science at the University of Michigan. He is South Asian Indian American and has a 3.7 GPA. Ravi is an active member of the university's Chess Club and the South Asian Student Association. He hopes to pursue a career in software engineering after graduating.\"\n\n# A simple prompt to extract information from \"student_description\" in a JSON format.\nprompt1 = f'''\nPlease extract the following information from the given text and return it as a JSON object:\n\nname\nmajor\nschool\ngrades\nclub\n\nThis is the body of text to extract the information from:\n{student_1_description}\n'''\n\nimport openai\n\n# Generating response back from gpt-3.5-turbo\nopenai_response = openai.ChatCompletion.create(\n    model = 'gpt-3.5-turbo',\n    messages = [{'role': 'user', 'content': prompt1}]\n)\n\n# Loading the response as a JSON object\njson_response = json.loads(openai_response['choices'][0]['message']['content'])\njson_response\n```\n:::\n\n\n```bash\n{'name': 'David Nguyen', 'major': 'computer science', 'school': 'Stanford University', 'grades': '3.8 GPA', 'club': 'Robotics Club'}\n```\n\n\n### 반복 \n\n\n::: {.cell}\n\n```{.python .cell-code}\nstudent_custom_functions = [\n    {\n        'name': 'extract_student_info',\n        'description': 'Get the student information from the body of the input text',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the person'\n                },\n                'major': {\n                    'type': 'string',\n                    'description': 'Major subject.'\n                },\n                'school': {\n                    'type': 'string',\n                    'description': 'The university name.'\n                },\n                'grades': {\n                    'type': 'integer',\n                    'description': 'GPA of the student.'\n                },\n                'club': {\n                    'type': 'string',\n                    'description': 'School club for extracurricular activities. '\n                }\n                \n            }\n        }\n    }\n]\n\nstudent_description = [student_1_description,student_2_description]\nfor sample in student_description:\n    response = openai.ChatCompletion.create(\n        model = 'gpt-3.5-turbo',\n        messages = [{'role': 'user', 'content': sample}],\n        functions = student_custom_functions,\n        function_call = 'auto'\n    )\n\n    # Loading the response as a JSON object\n    json_response = json.loads(response['choices'][0]['message']['function_call']['arguments'])\n    print(json_response)\n\n```\n:::\n\n\n```bash\n{'name': 'David Nguyen', 'major': 'computer science', 'school': 'Stanford University', 'grades': 3.8, 'club': 'Robotics Club'}\n{'name': 'Ravi Patel', 'major': 'computer science', 'school': 'University of Michigan', 'grades': 3.7, 'club': 'Chess Club'}\n```\n\n### 여러 작업\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncustom_functions = [\n    {\n        'name': 'extract_student_info',\n        'description': 'Get the student information from the body of the input text',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the person'\n                },\n                'major': {\n                    'type': 'string',\n                    'description': 'Major subject.'\n                },\n                'school': {\n                    'type': 'string',\n                    'description': 'The university name.'\n                },\n                'grades': {\n                    'type': 'integer',\n                    'description': 'GPA of the student.'\n                },\n                'club': {\n                    'type': 'string',\n                    'description': 'School club for extracurricular activities. '\n                }\n                \n            }\n        }\n    },\n    {\n        'name': 'extract_school_info',\n        'description': 'Get the school information from the body of the input text',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the school.'\n                },\n                'ranking': {\n                    'type': 'integer',\n                    'description': 'QS world ranking of the school.'\n                },\n                'country': {\n                    'type': 'string',\n                    'description': 'Country of the school.'\n                },\n                'no_of_students': {\n                    'type': 'integer',\n                    'description': 'Number of students enrolled in the school.'\n                }\n            }\n        }\n    }\n]\n\nschool_1_description = \"Stanford University is a private research university located in Stanford, California, United States. It was founded in 1885 by Leland Stanford and his wife, Jane Stanford, in memory of their only child, Leland Stanford Jr. The university is ranked #5 in the world by QS World University Rankings. It has over 17,000 students, including about 7,600 undergraduates and 9,500 graduates23. \"\n\ndescription = [student_1_description, school_1_description]\nfor i in description:\n    response = openai.ChatCompletion.create(\n        model = 'gpt-3.5-turbo',\n        messages = [{'role': 'user', 'content': i}],\n        functions = custom_functions,\n        function_call = 'auto'\n    )\n\n    # Loading the response as a JSON object\n    json_response = json.loads(response['choices'][0]['message']['function_call']['arguments'])\n    print(json_response)\n    \n```\n:::\n\n\n```bash\n{'name': 'David Nguyen', 'major': 'computer science', 'school': 'Stanford University', 'grades': 3.8, 'club': 'Robotics Club'}\n{'name': 'Stanford University', 'ranking': 5, 'country': 'United States', 'no_of_students': 17000}\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}