{
  "hash": "ac79a11e91b0bac506a5671900e0a1ea",
  "result": {
    "markdown": "---\ntitle: \"챗GPT\"\nsubtitle: \"OpenAI API 응용프로그램\"\ndescription: |\n  OpenAI API 환경을 갖춘 후에 본격적인 응용프로그램 개발을 시작해보자.\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ndate: today    \ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: false\n    code-overflow: wrap\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\nlightbox: auto\nlink-citations: true\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n# 들어가며\n\n`.env` 파일에 OpenAI API-KEY 를 저장한 경우 `.gitignore` 에 `.env`를 기록하여 협업과 \n공개를 할 경우 주요 정보가 외부에 노출 되지 않도록 주의한다.\n\n## `openai` 패키지 \n\nGitHub 저장소 [OpenAI Python Library](https://github.com/openai/openai-python)의 `openai` 파이썬 패키지를 설치한 후 버전을 확인한다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n! pip show openai\n\nName: openai\nVersion: 0.27.2\nSummary: Python client library for the OpenAI API\nHome-page: https://github.com/openai/openai-python\nAuthor: OpenAI\nAuthor-email: support@openai.com\nLicense: \nLocation: c:\\miniconda\\envs\\r-reticulate\\lib\\site-packages\nRequires: aiohttp, requests, tqdm\nRequired-by: \n```\n:::\n\n\n\n## `gpt-4` 모델\n\n`gpt-3.5-turbo` 모형은 속도가 빠르고 API 호출 당 가격이 저렴하지만,\n성능이 `gpt-4` 보다 낮은 것으로 알려져 있다.  `max_tokens` 크기를 달리하여 API 반환길이를 조절할 수 있고, `temperature` 값을 달리하여 사실에 보다 가까운 값을 얻고자 할 경우 0으로 그렇지 않고 다양한 창의적인 응답을 원할 경우 0 보다 큰 값을 지정한다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport openai\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n\nresponse = ChatCompletion.create(\n  model       = \"gpt-4\",\n  messages    = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"파이썬하고 R 하고 싸우면 누가 이겨?\"}\n  ],\n  max_tokens   = 100,\n  temperature  = 0\n)\n\nprint(response[\"choices\"][0]['message']['content'])\n```\n:::\n\n\n``` bash\n파이썬과 R은 프로그래밍 언어로, 싸우는 것이 아니라 각각의 특성과 용도에 따라 사용됩니다. \n\n파이썬은 범용 프로그래밍 언어로, 웹 개발, 데이터 분석, 인공 지능 등 다양한 분야에서 사용됩니다.\n```\n\n# `ChatCompletion`\n\n`openai.Completion.create()` 함수를 사용하여 `text-davinci-003`, `text-davinci-002`, `ada`, `babbage`, `curie`, `davinci` 등 텍스트 완성 기능을 사용할 수 있다. \n하지만, `openai.ChatCompletion.create()` 함수를 사용하게 되면 `gpt-4`를 비롯한 고급 모형과 AI 고급기능을 사용할 수 있지만 비용이 높아진다.\n\n\n[[OpenAI Pricing](https://openai.com/pricing)]{.aside}\n\n# 중재(Moderation)\n\nAI LLM 모형에 입력값으로 전달되는 다양한 텍스트에 부적절한 내용이 담겨있을 수 있다. \nAI 제품을 제작할 때 이를 사전에 감지하여 적절한 조치를 취하는 것이 필요하다.\n\n[욕설 감지 데이터셋](https://github.com/2runo/Curse-detection-data)에서 욕설로 \n라벨링된 텍스트를 하나 가져와서 살펴본다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport openai\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n#> True\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n\nresponse = openai.Moderation.create(\n  model = \"text-moderation-latest\",\n  input = \"정신병자 천국이구나\"\n)\n\nprint(response)\n#> {\n#>   \"id\": \"modr-7dwWS1RCU6qbmrmJNQOZrxElV6Qsa\",\n#>   \"model\": \"text-moderation-005\",\n#>   \"results\": [\n#>     {\n#>       \"flagged\": false,\n#>       \"categories\": {\n#>         \"sexual\": false,\n#>         \"hate\": false,\n#>         \"harassment\": false,\n#>         \"self-harm\": false,\n#>         \"sexual/minors\": false,\n#>         \"hate/threatening\": false,\n#>         \"violence/graphic\": false,\n#>         \"self-harm/intent\": false,\n#>         \"self-harm/instructions\": false,\n#>         \"harassment/threatening\": false,\n#>         \"violence\": false\n#>       },\n#>       \"category_scores\": {\n#>         \"sexual\": 4.693797e-05,\n#>         \"hate\": 0.000676339,\n#>         \"harassment\": 0.0005268965,\n#>         \"self-harm\": 9.536401e-06,\n#>         \"sexual/minors\": 8.569186e-07,\n#>         \"hate/threatening\": 0.0012578131,\n#>         \"violence/graphic\": 9.558387e-07,\n#>         \"self-harm/intent\": 2.2572526e-06,\n#>         \"self-harm/instructions\": 2.0226207e-06,\n#>         \"harassment/threatening\": 0.00021643011,\n#>         \"violence\": 1.2982889e-05\n#>       }\n#>     }\n#>   ]\n#> }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nlibrary(tidyverse)\n\n\nmoderation_part_1 <- py$response$results[[1]]$categories |> \n  enframe(name = \"구분\") |> \n  mutate(판정 = map_lgl(value, 1)) |> \n  select(구분, 판정)\n\n\nmoderation_part_2 <- py$response$results[[1]]$category_scores |> \n  enframe(name = \"구분\") |> \n  mutate(점수 = map_dbl(value, 1)) |> \n  select(구분, 점수)\n\nmoderation_tbl <- left_join(moderation_part_1, moderation_part_2)\n\nmoderation_tbl |> \n  arrange(desc(점수))\n#> # A tibble: 11 × 3\n#>    구분                   판정         점수\n#>    <chr>                  <lgl>       <dbl>\n#>  1 hate/threatening       FALSE 0.00126    \n#>  2 hate                   FALSE 0.000676   \n#>  3 harassment             FALSE 0.000527   \n#>  4 harassment/threatening FALSE 0.000216   \n#>  5 sexual                 FALSE 0.0000469  \n#>  6 violence               FALSE 0.0000130  \n#>  7 self-harm              FALSE 0.00000954 \n#>  8 self-harm/intent       FALSE 0.00000226 \n#>  9 self-harm/instructions FALSE 0.00000202 \n#> 10 violence/graphic       FALSE 0.000000956\n#> 11 sexual/minors          FALSE 0.000000857\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}