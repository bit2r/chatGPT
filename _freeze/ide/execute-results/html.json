{
  "hash": "4dbb36b394da1b249f74327bc1238e79",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"통합개발환경(IDE)\"\ndescription: \"비쥬얼 스튜디오 코드 IDE를 사용하여 개발 생산성을 높인다.\"\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    code-overflow: wrap\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\n   - custom-callout.lua   \nlightbox: auto\nlink-citations: yes\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n`chatGPT` 는 데이터 과학자 개발생산성을 비약적으로 증진시키는 것으로 알려져있다.\n특히 데이터 과학에서 개발생산성 관련 큰 역할을 수행하는 것이 통합개발환경(IDE)이다.\nPosit에서 개발한 RStudio가 출현하면서 기존 R언어를 다양한 편집기(VIM,Emacs 등)로 \n주로 개발하던 문화를 획기적으로 바뀌었다면 이제는 GitHub Copilot을 어떤 형태로든\n붙여서 사용하면 더욱 생산성을 높일 수 있다.\n\n![](images/ide-copilot.png)\n\n# VS 코드 설치\n\nVS 코드를 통해 데이터 과학 제품개발을 할 경우 다음 사항에 맞춰 개발을 시작한다.\n\n1. R을 설치한다.\n2. `languageserver` 패키지를 설치한다.\n  - `install.packages(\"languageserver\")`\n3. Visual Studio Code 에서 `R extension`을 설치한다.\n4. `.R` 파일에 개발을 시작한다.\n\n\n## `R extension` 설치\n\n`R extension`을 설치하게 되면 VS Code에서 R 코드 개발을 원활히 할 수 있도록 지원한다. \nVS Code 에 필수적인 `R extension`은 다음을 꼽을 수 있다. `R extension`을 설치하면\nRStudio에서 기본설정으로 지정된 단축키를 별도 설정없이 자동 지정되기 때문에 \n편리하다.\n\n- [R - REditorSupport](https://marketplace.visualstudio.com/items?itemName=REditorSupport.r)\n- [R Markdown All in One](https://marketplace.visualstudio.com/items?itemName=TianyiShi.rmarkdown)\n- [Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)\n- [R Debugger](https://marketplace.visualstudio.com/items?itemName=RDebugger.r-debugger)\n\n\n![VS Code를 실행하고 R Extension 설치](images/vscode_R_extension.png)\n\n## 헬로우 월드\n\n`R Extension` 설치되면 코드 창 상단에 실행버튼이 활성화되고 <kbd>Ctrl</kbd> + <kbd>Enter</kbd> 혹은 \n<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd>\n\n\n![R 코드 실행화면](images/vscode_helloworld.png)\n\n\n## 유튜브 동영상\n\n\n{{< video https://youtu.be/c3ZQ8-OYj2M >}}\n\n\n\n\n# 코딩 글꼴\n\n다른 언어와 마찬가지로 R 코드로 데이터 과학 제품을 개발할 경우 글꼴도 코딩에 적합한 한글 글꼴을 설정한다.\n\n먼저 [D2 Coding 글꼴](https://github.com/naver/d2codingfont)을 다운로드 받아 운영체제에 설치한다.\n\nVS Code 좌측 하단 톱니바퀴 <kbd> Settings </kbd> 설정을 클릭 혹은 메뉴에서 \"File\" &rarr; \"Preferences\" &rarr; \"Settings\"를 통해 `편집기 (Text Editor)`로 들어가 운영체제에 설치한 코딩 폰트를 지정한다. **Font Ligatures** 도 `true`로 설정한다. 이를 통해 `< -` 표시가 &larr; 로 화면에 표현된다.\n\n![D2코딩 글꼴 장착](images/vscode_font.png)\n\n# 단축키\n\nR 코드 개발을 진행할 때 <kbd> %>% </kbd>, <kbd> &larr; </kbd> 두가지 기능이 가장 많이 사용되는 \n단축키로 RStudio에서는 기본으로 지원되고 있다. VS Code에서 자주 사용되는 \n단축키를 <kbd> CTRL </kbd> + <kbd> Shift </kbd> + <kbd> m </kbd>, <kbd> Alt </kbd> + <kbd> - </kbd> 를 적용시키는 방법을 살펴보자.\n\n만약 VS Code에서 단축키 설정 기능을 활용한다. [[How to add R {magrittr}'s %>% Pipe Operator in VSCode as Keyboard Shortcut](https://www.programmingwithr.com/how-to-add-r-magrittr-s-pipe-operator-in-vscode-as-keyboard-shortcut/)]{.aside}\n\n- 윈도우즈: File > Preferences > Keyboard Shortcuts. \n- 맥: Code > Preferences > Keyboard Shortcuts\n\n`keybindings.json` 파일에 <kbd> %>% </kbd>, <kbd> &larr; </kbd> 단축키 기능을 추가한다.\n\n![자주 사용되는 R 단축키 설정](images/vscode_shortcuts.png)\n\n# 패널\n\nRStudio는 코딩기반 데이터 분석과 통계에 최적화된 개발환경이다. \n즉, 편집기 패널, 콘솔/터미널 패널, 그래프 패널, 도움말/개발 패널로 구성된 \n꼭 필요한 패널만 구성되어 있다. \n\n::: {.panel-tabset}\n\n### 패널 설정 \n\n![VS Code: View &rarr; Editor Layout &rarr; Grid (2x2)](../../images/vscode_layout.png)\n\n### 설정 후\n\n![도움말과 그래프](images/vscode_layout_screen.png)\n:::\n\n# `Radiant`\n\n\n[[Schiff consulting, 'Using R in VS Code: Some things I learned while trying out R in VS Code'](https://schiff.co.nz/blog/r-and-vscode/)]{.aside}\n\n# `.qmd`, `.Rmd` \n\nliterate programming을 구현한 `.qmd`, `.Rmd` 파일를 작성하여 다양한 데이터 과학 \n문서를 작성할 수 있다.\n\n[**Pandoc** a universal document converter](https://pandoc.org/installing.html) 웹사이트에서\n`pandoc`을 설치해야 한다. pandoc 최신버전을 설치하면 되고 버전이 2.16 이상이 되어야 활용이 가능하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$ pandoc --version\npandoc 2.19.2\nCompiled with pandoc-types 1.22.2.1, texmath 0.12.5.2, skylighting 0.13,\nciteproc 0.8.0.1, ipynb 0.2, hslua 2.2.1\nScripting engine: Lua 5.4\nUser data directory: C:\\Users\\statkclee\\AppData\\Roaming\\pandoc\nCopyright (C) 2006-2022 John MacFarlane. Web:  https://pandoc.org\nThis is free software; see the source for copying conditions. There is no\nwarranty, not even for merchantability or fitness for a particular purpose.\n```\n:::\n\n\n## `keybindings.json`\n\n`keybindings.json` 파일에 R 혹은 파이썬 코드를 삽입시킬 수 있는 키보드 단축키를 \n등록시킨다. [자료출처: [VS Code: Add a Rmarkdown Code Chunk Snippet Key Binding](https://www.schmidtynotes.com/blog/r/2021-09-28-vscode-rmd-code-chunk-snippet/)]{.aside}\n\n::: {.callout-tip collapse=\"true\"}\n\n### `keybindings.json` 설정파일 예시\n\n\n```json\n// Place your key bindings in this file to override the defaults\n[\n    // keybindings for R scripts. \n    {\n        \"key\": \"Ctrl+Shift+m\",\n        \"command\": \"type\",\n        \"args\": { \"text\": \" %>% \" },\n        \"when\": \"editorTextFocus && editorLangId == r\"\n      },\n      {\n        \"key\": \"Alt+-\",\n        \"command\": \"type\",\n        \"args\": { \"text\": \" <- \" },\n        \"when\": \"editorTextFocus && editorLangId == r\"\n      },\n      // keybindings for Rmarkdown\n      {\n        \"key\": \"Ctrl+Shift+m\",\n        \"command\": \"type\",\n        \"args\": { \"text\": \" %>% \" },\n        \"when\": \"editorTextFocus && editorLangId == rmd\"\n      },\n      {\n        \"key\": \"Alt+-\",\n        \"command\": \"type\",\n        \"args\": { \"text\": \" <- \" },\n        \"when\": \"editorTextFocus && editorLangId == rmd\"\n      },\n      // keybindings for R terminal (radian included)\n      {\n        \"key\": \"Ctrl+Shift+m\",\n        \"command\": \"workbench.action.terminal.sendSequence\",\n        \"args\": { \"text\": \" %>% \" },\n        \"when\": \"terminalFocus\"\n      },\n      {\n        \"key\": \"Alt+-\",\n        \"command\": \"workbench.action.terminal.sendSequence\",\n        \"args\": { \"text\": \" <- \" },\n        \"when\": \"terminalFocus\"\n      },\n      // Insert R Code chunk\n      {\n        \"key\": \"ctrl+alt+i\". \n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus\",\n        \"args\": {\"snippet\": \"```{r}\\n$0\\n```\"}\n      },\n      {\n        \"key\": \"ctrl+alt+o\". \n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus\",\n        \"args\": {\"snippet\": \"options(\\n  max.print=100,\\n  vsc.use_httpgd=TRUE,\\n  device='quartz'\\n)\"}\n      },\n      {\n        \"key\": \"ctrl+alt+m\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus\",\n        \"args\":{\n          \"snippet\": \"---\\ntitle: '$0'\\nauthor: '이광춘'\\ndate: '2023-03-07'\\noutput:\\n  pagedown::html_paged:\\n    self_contained: true\\n    toc: false\\n---\\n\\n```{r setup, include=FALSE}\\nknitr::opts_chunk\\\\$set(\\n  echo = FALSE,\\n  message = FALSE,\\n  warning=FALSE\\n)\\n```\"\n        }\n      },\n\n]\n```\n\n:::\n\n## HTML 미리보기\n\n`.Rmd` 파일을 <kbd> CTRL </kbd> + <kbd> Shift </kbd> + <kbd> k </kbd> 단축키로 컴파일시키면 \n`.html` 파일이 생성된다. `.html` 파일 결과를 직접 실시간으로 확인하고자 한다면, \n마이크로소프트가 개발한 [`Live Preview - VS Code Extension`](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) 플러그인을 설치한다.\n\n![](images/vscode_open-context-menu.gif)\n\n\n# GitHub copilot\n\nGitHub에서 공개한 Copilot은 AI pair programmer라는 부제를 달고 있고,\n[GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot) 플러그인을 \n설치하면 사용이 가능하다.\n한가지 <kbd> CTRL </kbd> + <kbd> Enter </kbd> 단축키가 충돌되어 R 코드 실행하는 것과 겹쳐서 문제가 있기 때문에\n단축키를 <kbd> CTRL </kbd> + <kbd> Shift </kbd> + <kbd> Alt </kbd> + <kbd> Enter </kbd>와 같이 조정하면 큰 문제 없이 \nR 개발할 때 GitHub copilot과 함께 사용이 가능하다.\n이를 위해서 `keybindings.json` 파일에 다음 사항을 추가한다. \n사용자별로 단축키를 달리해서 적용시키는 것도 물론 가능하다.\n\n- 코드 라인별로 추천 승인: <kbd> Tab </kbd>\n- 전체 코드 작성 전체 추천 : <kbd> CTRL </kbd> + <kbd> Shift </kbd> + <kbd> Alt </kbd> + <kbd> Enter </kbd>\n  - `Accept Solution` 클릭\n  - 코드 작성 편집기에 관련 사항 반영\n\n\n::: {.callout-tip collapse=\"true\"}\n\n### `keybindings.json` 설정파일 예시\n\n\n```json\n[\n  ...\n      // GitHub Copilot\n      {\n        \"key\": \"ctrl+shift+alt+enter\",\n        \"command\": \"github.copilot.generate\",\n        \"when\": \"editorTextFocus && github.copilot.activated && editorLangId == 'r'\"\n    },\n    {\n      \"key\": \"tab\",\n      \"command\": \"editor.action.inlineSuggest.commit\",\n      \"when\": \"textInputFocus && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus\"     \n    },\n]\n```    \n\n:::\n\n![](images/vscode_copilot.gif)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}