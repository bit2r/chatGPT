{
  "hash": "015c4d53a3d45bf63df355536c166765",
  "result": {
    "markdown": "---\ntitle: \"chatGPT\"\nsubtitle: \"텍스트 &rarr; 이미지 생성\"\ndescription: 텍스트에서 원하는 이미지를 생성하는 방법을 살펴보자.\nauthor:\n  - name: 이광춘\n    url: https://www.linkedin.com/in/kwangchunlee/\n    affiliation: 한국 R 사용자회\n    affiliation-url: https://github.com/bit2r\ntitle-block-banner: true\n#title-block-banner: \"#562457\"\nformat:\n  html:\n    css: css/quarto.css\n    theme: flatly\n    code-fold: true\n    toc: true\n    toc-depth: 3\n    toc-title: 목차\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nfilters:\n   - lightbox\n   - custom-callout.lua   \nlightbox: auto\nlink-citations: yes\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n![](images/text2image_workflow.jpg)\n\n# 이미지 생성\n\n**TTI(Text-to-image)**는 자연어 텍스트를 입력으로 사용하여 이미지를 생성하는 프로세스다. \n개발자의 목표는 이미지의 텍스트 설명을 이해 및 해석하고 설명과 일치하는 해당 이미지를 생성할 수 있는 알고리즘을 개발하는 것이고, 사용자는 TTI기능을 잘 구현한 엔진을 기반으로 원하는 \n이미지를 신속히 고품질로 저렴하게 제작하는 것이다.\n개발자는 일반적으로 GAN(Generative Adversarial Network) 또는 VAE(Variational Autoencoder)와 같은 머신 러닝 및 딥 러닝 기술을 기반으로 텍스트 및 이미지가 쌍으로 이뤄진 대규모 데이터 셋을 훈련하여 고성능 AI 모형을 개발한다.\n\n## `openai` 패키지\n\n[`openai`](https://cran.r-project.org/web/packages/openai/index.html) 패키지\n`create_image()` 함수를 사용하여 이미지를 제작할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(openai)\n\n# usethis::edit_r_environ(scope = \"project\")\n\nresponse <- create_image(\n    prompt = \"Create R programming language logo for Korean R user group in a kandinsky and Gustav Klimt style embracing Python programming language supported by many contributors around the world, which must include R logo from R consortium and wikipedia\",\n    n = 1,\n    size = \"256x256\",\n    response_format = \"url\",\n    openai_api_key = Sys.getenv(\"OPEN_AI_KEY\")\n)\n\nlibrary(magick)\nR_logo <- image_read(response$data$url)\nprint(R_logo)\n\nmagick::image_write(R_logo, \"images/R_logo.png\")\n\n```\n:::\n\n\n![](images/R_logo.png)\n\n# 무병장수 사례\n\n역사상 가장 유명한 화풍을 chatGPT로부터 추천받아 이를 다양한 방식으로 시각화해보자. \n무병장수(無病長壽)를 주제로 그림을 그려보자.\n\n> 무병장수 세상을 르네상스 화풍으로 그려줘 : \n> 'draw good health and long life world in a Renaissance style'\n\n## chatGPT 프롬프트\n\nrecommend the most famous painting style in history\n\n::: {.custom-callout-tip collapse=\"true\"}\n\nHere are some of the most famous painting styles in history:\n\n1. Renaissance: The Renaissance was a cultural movement in Italy from the 14th to the 17th century, characterized by a renewed interest in classical art, philosophy, and science. Renaissance paintings are known for their realism, balance, and harmony.\n\n1. Baroque: The Baroque style was popular in Europe from the late 16th to the early 18th century. Baroque paintings are known for their dramatic lighting, intense emotions, and dynamic compositions.\n\n1. Impressionism: Impressionism was a modernist movement in French painting in the late 19th century. Impressionist paintings are known for their loose brushstrokes, light-filled compositions, and focus on capturing fleeting moments.\n\n1. Surrealism: Surrealism was a cultural movement in the 20th century that aimed to liberate the imagination and explore the subconscious. Surrealist paintings are known for their dreamlike and fantastical imagery.\n\n1. Abstract Expressionism: Abstract Expressionism was a modernist movement in American painting in the mid-20th century. Abstract Expressionist paintings are known for their large canvases, gestural brushstrokes, and emphasis on the process of creation.\n\nThese are just a few examples of famous painting styles in history. There are many other styles that have influenced and shaped the course of art history.\n\n:::\n\n[[Open AI - Create image API](https://platform.openai.com/docs/api-reference/images/create)]{.aside}\n\n\n## 화풍을 달리한 그림\n\n::: {.panel-tabset}\n\n### 르네상스(Renaissance)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(openai)\n\n# usethis::edit_r_environ(scope = \"project\")\n\nresponse <- create_image(\n    prompt = \"draw good health and long life world in a Renaissance style\",\n    n = 1,\n    size = \"1024x1024\",\n    response_format = \"url\",\n    openai_api_key = Sys.getenv('OPEN_AI_KEY')\n)\n\nRenaissance <- image_read(response$data$url)\nprint(Renaissance)\n\nimage_write(Renaissance, path = \"images/styles/Renaissance.png\", format = \"png\")\n```\n:::\n\n\n![르네상스(Renaissance)](images/styles/Renaissance.png)\n\n### 바로크(Baroque)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponse <- create_image(\n    prompt = \"draw good health and long life world in a Baroque style\",\n    n = 1,\n    size = \"1024x1024\",\n    response_format = \"url\",\n    openai_api_key = Sys.getenv('OPEN_AI_KEY')\n)\n\nBaroque <- image_read(response$data$url)\nprint(Baroque)\n\nimage_write(Baroque, path = \"images/styles/Baroque.png\", format = \"png\")\n```\n:::\n\n\n![바로크(Baroque)](images/styles/Baroque.png)\n\n### 인상주의(Impressionism)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponse <- create_image(\n    prompt = \"draw good health and long life world in a Impressionism style\",\n    n = 1,\n    size = \"1024x1024\",\n    response_format = \"url\",\n    openai_api_key = Sys.getenv('OPEN_AI_KEY')\n)\n\nImpressionism <- image_read(response$data$url)\nprint(Impressionism)\n\nimage_write(Impressionism, path = \"images/styles/Impressionism.png\", format = \"png\")\n```\n:::\n\n\n![인상주의(Impressionism)](images/styles/Impressionism.png)\n\n### 초현실주의(Surrealism)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponse <- create_image(\n    prompt = \"draw good health and long life world in a Surrealism style\",\n    n = 1,\n    size = \"1024x1024\",\n    response_format = \"url\",\n    openai_api_key = Sys.getenv('OPEN_AI_KEY')\n)\n\nSurrealism <- image_read(response$data$url)\nprint(Surrealism)\n\nimage_write(Surrealism, path = \"images/styles/Surrealism.png\", format = \"png\")\n```\n:::\n\n\n![초현실주의(Surrealism)](images/styles/Surrealism.png)\n\n### 추상표현주의(Abstract Expressionism)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponse <- create_image(\n    prompt = \"draw good health and long life world in a Abstract Expressionism style\",\n    n = 1,\n    size = \"1024x1024\",\n    response_format = \"url\",\n    openai_api_key = Sys.getenv('OPEN_AI_KEY')\n)\n\nexpressionism <- image_read(response$data$url)\nprint(expressionism)\n\nimage_write(expressionism, path = \"images/styles/expressionism.png\", format = \"png\")\n```\n:::\n\n\n![추상표현주의(Abstract Expressionism)](images/styles/expressionism.png)\n\n:::\n\n\n# `BitGPT`\n\n[`bitGPT`](https://github.com/bit2r/bitGPT)는 chatGPT를 보다 쉽게 사용할 수 있는, 그리고 한국어를 지원하는 `openai`, `gpttools`와 같지만 한국 R 사용자회에서 개발하여 공개한 패키지로 차이가 있습니다.\n\n한글을 파파고 엔진을 사용하여 영어로 번역한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# devtools::install_github(\"bit2r/bitGPT\")\nlibrary(bitGPT)\n\ntext <- \"무병장수 세상을 르네상스 화풍으로 그려줘\"\neng_prompt <- translate(text,\n                      source = \"ko\",\n                      target = \"en\",\n                      client_id = Sys.getenv(\"NAVER_CLIENT_ID\"),\n                      client_secret = Sys.getenv(\"NAVER_CLIENT_SECRET\"))\neng_prompt\n#> [1] \"Draw a Renaissance style of the world of health and longevity.\"\n```\n:::\n\n\n`chatGPT` text-to-image 기능을 사용하여 앞서 한글을 영어로 번역한 **지시명령어(Prompt)**를 사용하여 이미지를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw_img(\n  eng_prompt,\n  ko2en = FALSE,\n  n = 1L,\n  size = \"512x512\",\n  type = \"file\",\n  format = \"png\",\n  path = \"./images\",\n  fname = \"bitGPT_life\",\n  openai_api_key = Sys.getenv(\"OPEN_AI_KEY\")\n)\n```\n:::\n\n\n![](images/bitGPT_life.png)\n\n마지막으로 `bitGPT`의 `draw_img()` 함수에 한글 넣어 바로 이미지로 뽑아내는 실험을 수행해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw_img(\n  \"인공지능과 사람이 공존하는 통일된 대한민국을 검사를 포함하여 그려줘\",\n  ko2en = TRUE,\n  n = 1L,\n  size = \"512x512\",\n  type = \"file\",\n  format = \"png\",\n  path = \"./images\",\n  fname = \"bitGPT_korean\",\n  openai_api_key = Sys.getenv(\"OPEN_AI_KEY\")\n)\n```\n:::\n\n\n\n![](images/bitGPT_korean.png)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}